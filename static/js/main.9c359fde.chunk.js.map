{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["BottomNavbar","_ref","onRecipeClick","React","createElement","Navbar","fixed","bg","className","Nav","Link","href","onClick","event","preventDefault","MealPlan","_ref2","mealPlan","babyMonth","stage","onRegeneratePlan","onMealSave","onMealDelete","isRecipeTab","style","marginTop","concat","Row","xs","md","map","meal","index","badCombinationWarning","ingredients","item","ingredient","i","length","badCombinationMeat","badCombination","find","includes","checkBadCombination","allergenWarning","allergens","allergenVeggies","filter","allergenList","join","particle","word","lastChar","charAt","getSubjectParticle","checkAllergen","Col","Card","Body","Title","slice","BsPencilSquare","marginRight","marginLeft","BsSave","BsXLg","variant","Text","undefined","category","Alert","marginBottom","Button","window","location","reload","generateMealPlan","menuCount","selectedMenuCount","selectedCategories","allCategories","Object","keys","_loop","selectedIngredients","forEach","categoryItems","month","randomIndex","Math","floor","random","push","randomCategory","randomIngredient","FoodSelectionForm","_ref3","onFormSubmit","_useState","useState","_useState2","_slicedToArray","step","setStep","_useState3","_useState4","setBabyMonth","_useState5","_useState6","setMenuCount","_useState7","_useState8","setSelectedMenuCount","_useState9","_useState10","setSelectedCategories","_useState11","setSelectedIngredients","Form","onSubmit","determineStage","Group","controlId","Label","Slider","axis","x","xmin","xmax","onChange","_ref4","Check","type","label","value","e","target","prevCategories","_toConsumableArray","prevIngredients","_ref5","_ref6","Stack","gap","App","_useState13","_useState14","setIsRecipeTab","_useState15","_useState16","dietPlan","setDietPlan","useEffect","handleLoadSavedMeals","savedMeals","localStorage","getItem","JSON","parse","meals","_useState17","_useState18","lastInputValues","setLastInputValues","Container","lg","plan","setItem","stringify","newDietPlan","savedMeal","reportWebVitals","onPerfEntry","Function","__webpack_require__","then","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.9c359fde.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Container, Row, Col, Button, Form } from 'react-bootstrap';\nimport Slider from 'react-input-slider';\n\nimport { Card, Stack } from 'react-bootstrap';\nimport { Alert } from 'react-bootstrap';\nimport { Navbar, Nav } from 'react-bootstrap';\nimport { BsPencilSquare, BsSave, BsXLg } from \"react-icons/bs\";\n\nimport badCombinationMeat from './badCombinationMeat.json';\nimport allergenVeggies from './allergenVeggies.json';\nimport ingredients from './ingredients.json';\n\nconst BottomNavbar = ({ onRecipeClick }) => {\n  return (\n    <Navbar fixed=\"bottom\" bg=\"light\" className=\"justify-content-around\">\n      <Nav.Link href=\"#recipe\" onClick={(event) => {event.preventDefault(); onRecipeClick();}}>레시피</Nav.Link>\n      <Nav.Link href=\"#ranking\">랭킹</Nav.Link>\n    </Navbar>\n  );\n};\n\nconst MealPlan = ({ mealPlan, babyMonth, stage, onRegeneratePlan, onMealSave, onMealDelete, isRecipeTab }) => {\n  const getSubjectParticle = (word) => {\n    const lastChar = word.charAt(word.length - 1);\n    // If the last character is a vowel, return '은'; otherwise, return '는'\n    return ['가', '나', '다', '라', '대', '린','림', '마', '망', '바', '사', '아', '차', '콩', '타', '파', '하'].includes(lastChar) ? '은' : '는';\n  };\n    \n  const checkBadCombination = (meal) => {\n    const ingredients = meal.map(item => item.ingredient);\n    for (let i = 0; i < ingredients.length; i++) {\n      if (badCombinationMeat[ingredients[i]]) {\n        const badCombination = badCombinationMeat[ingredients[i]].find(ingredient => ingredients.includes(ingredient));\n        if (badCombination) {\n          return `주의: ${ingredients[i]}와 ${badCombination}은 좋지 않은 궁합입니다.`;\n        }\n      }\n    }\n    return null;\n  };\n\n  const checkAllergen = (meal) => {\n    const ingredients = meal.map(item => item.ingredient);\n    const allergens = allergenVeggies.filter(ingredient => ingredients.includes(ingredient));\n    if (allergens.length > 0) {\n      const allergenList = allergens.join(', ');\n      const particle = getSubjectParticle(allergenList);\n      return `주의: ${allergenList}${particle} 알레르기를 유발할 수 있습니다.`;\n    }\n    return null;\n  };\n  \n  \n  return (\n    <div>\n      <h2 className=\"text-center\" style={{ marginTop: '20px' }}>\n        {babyMonth ? `${babyMonth}개월 아기, ` : ''}{stage} 식단표\n        </h2>\n      <Row xs={1} md={2} className=\"g-4\">\n        {mealPlan.map((meal, index) => {\n          const badCombinationWarning = checkBadCombination(meal);\n          const allergenWarning = checkAllergen(meal);\n          return (\n            <Col>\n              <Card>\n                <Card.Body>\n                  <Card.Title>메뉴 {index + 1}: {meal.slice(0, 2).map(item => item.ingredient).join(' ') } \n                  <BsPencilSquare style={{ marginRight: '10px', marginLeft: '10px' }}/>\n                  {!isRecipeTab && <BsSave onClick={() => onMealSave(meal)} />}\n                  {!isRecipeTab && <BsXLg onClick={() => onMealDelete(meal)} style={{ marginLeft: '10px' }}/>}\n                  {isRecipeTab && <BsXLg variant=\"danger\" onClick={() => onMealDelete(meal) }/>}\n                  </Card.Title>\n                  <Card.Text>\n                  식재료: {meal.filter(item => item.ingredient !== undefined).map(item => `${item.ingredient} (${item.category})`).join(', ')}\n                  </Card.Text>\n                  {badCombinationWarning && <Alert variant=\"warning\">{badCombinationWarning}</Alert>}\n                  {allergenWarning && <Alert variant=\"danger\">{allergenWarning}</Alert>}\n                </Card.Body>\n              </Card>\n            </Col>\n          );\n        })}\n      </Row>\n      <Row className=\"text-center\">\n      {!isRecipeTab ? (\n        <div className=\"d-flex justify-content-center mt-3\" style={{ marginBottom: '70px' }}>\n          <Col>\n            <Button className=\"floating\" variant=\"success\" onClick={onRegeneratePlan}>\n              식단표 다시 생성\n            </Button>\n          </Col>\n          <Col>\n            <Button variant=\"primary\" onClick={() => window.location.reload()}>\n              처음으로\n            </Button>\n          </Col>\n        </div>\n      ) : (\n        <div className=\"d-flex justify-content-center mt-3\" style={{ marginBottom: '70px' }}>\n          <Col>\n            <Button variant=\"primary\" onClick={onRegeneratePlan}>\n              메뉴 생성하기\n            </Button>\n          </Col>\n        </div>\n      )}\n      </Row>\n    </div>\n  );\n};\n\nconst generateMealPlan = (menuCount, selectedMenuCount, selectedCategories, babyMonth) => {\n  let mealPlan = [];\n  const allCategories = Object.keys(ingredients);\n\n  for (let i = 0; i < menuCount; i++) {\n    const meal = [];\n    const selectedIngredients = [];\n\n    selectedCategories.forEach((category) => {\n      // Collect all ingredients for the category up to the selected babyMonth\n      let categoryItems = [];\n      for (let month = 4; month <= babyMonth; month++) {\n        categoryItems = categoryItems.concat(ingredients[category][month] || []);\n      }\n    \n      // If the category has no items, skip this category\n      if (categoryItems.length === 0) {\n        return;\n      }\n\n      let randomIndex = Math.floor(Math.random() * categoryItems.length);\n\n      while (selectedIngredients.includes(categoryItems[randomIndex])) {\n        randomIndex = Math.floor(Math.random() * categoryItems.length);\n      }\n\n      selectedIngredients.push(categoryItems[randomIndex]);\n      // Save the ingredient together with its category\n      meal.push({ ingredient: categoryItems[randomIndex], category });\n    });\n\n    // If the meal is still less than the selected menu count, fill with random ingredients\n    while (meal.length < selectedMenuCount) {\n      const randomCategory = allCategories[Math.floor(Math.random() * allCategories.length)];\n\n      // Collect all ingredients for the category up to the selected babyMonth\n      let categoryItems = [];\n      for (let month = 4; month <= babyMonth; month++) {\n        categoryItems = categoryItems.concat(ingredients[randomCategory][month] || []);\n      }\n\n      const randomIngredient = categoryItems[Math.floor(Math.random() * categoryItems.length)];\n\n      if (!selectedIngredients.includes(randomIngredient)) {\n        selectedIngredients.push(randomIngredient);\n        // Save the ingredient together with its category\n        meal.push({ ingredient: randomIngredient, category: randomCategory });\n      }\n    }\n\n    mealPlan.push(meal);\n  }\n\n  return mealPlan;\n};\n\n\nconst FoodSelectionForm = ({ onFormSubmit }) => {\n  const [step, setStep] = useState(1);\n  const [babyMonth, setBabyMonth] = useState(8);\n  const [menuCount, setMenuCount] = useState(4);\n  const [selectedMenuCount, setSelectedMenuCount] = useState(3);\n  const [selectedCategories, setSelectedCategories] = useState([]);\n  const [setSelectedIngredients] = useState([]);\n\n  // Add a function to determine the stage based on the baby's month\n  const determineStage = (babyMonth) => {\n    if (babyMonth <= 6) {\n      return \"초기\";\n    } else if (babyMonth <= 9) {\n      return \"중기\";\n    } else if (babyMonth <= 12) {\n      return \"후기\";\n    } else {\n      return \"완료기\";\n    }\n  };\n\n  const handleFormSubmit = (event) => {\n    event.preventDefault();\n    \n    // If no categories are selected in step 2, skip to step 4\n    if (step === 2 && selectedCategories.length === 0) {\n      setStep(4);\n    } else if (step === 5) {\n      const stage = determineStage(babyMonth); // Determine the stage based on the baby's month\n      onFormSubmit(menuCount, selectedMenuCount, selectedCategories, babyMonth, stage);\n    } else {\n      setStep(step + 1);\n    }\n  };\n  \n  return (\n    <Form className=\"form-input\" onSubmit={handleFormSubmit}>\n      {step === 1 && (\n        <Form.Group className=\"mb-3\" controlId=\"formBabyMonth\">\n          <h2><Form.Label>아기의 나이를 선택하세요</Form.Label></h2>\n          <Slider\n            axis=\"x\"\n            x={babyMonth}\n            xmin={4}\n            xmax={12}\n            onChange={({ x }) => setBabyMonth(x)}\n          />\n          <div>선택된 개월 수: {babyMonth}</div>\n        </Form.Group>\n      )}\n\n      {step === 2 && (\n        <Form.Group className=\"mb-3 item-row\" controlId=\"formSelectedCategories\">\n          <h2><Form.Label>식재료 종류를 선택하세요</Form.Label></h2>\n          {Object.keys(ingredients).map((category) => {\n            let categoryItems = [];\n            for (let month = 4; month <= babyMonth; month++) {\n              if (ingredients[category][month]) {\n                categoryItems = categoryItems.concat(ingredients[category][month]);\n              }\n            }\n            if (categoryItems.length > 0) {\n              return (\n                <Form.Check className=\"checkbox-large\"\n                type=\"checkbox\"\n                label={category}\n                value={category}\n                onChange={(e) => {\n                  const value = e.target.value;\n                  setSelectedCategories((prevCategories) =>\n                    prevCategories.includes(value)\n                      ? prevCategories.filter((category) => category !== value)\n                      : [...prevCategories, value]\n                    );\n                  }}\n                />\n              );\n            } else {\n              return null;\n            }\n          })}\n        </Form.Group>\n      )}\n      {step === 3 && (\n          <Form.Group className=\"mb-3\" controlId=\"formSelectedIngredients\">\n            <h2><Form.Label>식재료를 선택하세요</Form.Label></h2>\n            {selectedCategories.map((category) => {\n              let categoryItems = [];\n              for (let month = 4; month <= babyMonth; month++) {\n                if (ingredients[category][month]) {\n                  categoryItems = categoryItems.concat(ingredients[category][month]);\n                }\n              }\n              return categoryItems.map((item) => (\n                <Form.Check className=\"checkbox-large\"\n                  type=\"checkbox\"\n                  label={item}\n                  value={item}\n                  onChange={(e) => {\n                    const value = e.target.value;\n                    setSelectedIngredients((prevIngredients) =>\n                      prevIngredients.includes(value)\n                        ? prevIngredients.filter((item) => item !== value)\n                        : [...prevIngredients, value]\n                    );\n                  }}\n                />\n              ));\n            })}\n          </Form.Group>\n      )}\n\n      {step === 4 && (\n        <Form.Group className=\"mb-3\" controlId=\"formSelectedMenuCount\">\n          <h2><Form.Label>식재료의 개수를 선택하세요</Form.Label></h2>\n          <Slider\n            axis=\"x\"\n            x={selectedMenuCount}\n            xmin={1}\n            xmax={5}\n            onChange={({ x }) => setSelectedMenuCount(x)}\n          />\n          <div>선택된 조합 식재료 종류: {selectedMenuCount}</div>\n        </Form.Group>\n      )}\n\n      {step === 5 && (        \n        <Form.Group className=\"mb-3\" controlId=\"formMenuCount\">\n          <h2><Form.Label>생성할 메뉴 개수를 선택하세요</Form.Label></h2>\n          <Slider\n            axis=\"x\"\n            x={menuCount}\n            xmin={1}\n            xmax={7}\n            onChange={({ x }) => setMenuCount(x)}\n          />\n          <div>선택된 메뉴 개수: {menuCount}</div>\n        </Form.Group>\n      )}\n      <Stack gap={5}>\n          <Button variant=\"primary\" type=\"submit\">\n            {step === 5 ? '식단표 생성하기' : '다음'}\n          </Button>\n        <h3 className=\"text-center\">{step} / 5</h3>\n      </Stack>\n    </Form>\n  );\n};\n\nconst App = () => {\n  const [isRecipeTab, setIsRecipeTab] = useState(false);\n  const [dietPlan, setDietPlan] = useState(null);\n  const handleMealSave = (meal) => {\n    // Save the meal to localStorage\n    let savedMeals = localStorage.getItem('savedMeals');\n    savedMeals = savedMeals ? JSON.parse(savedMeals) : [];\n    savedMeals.push(meal);\n    localStorage.setItem('savedMeals', JSON.stringify(savedMeals));\n  \n    // Remove the saved meal from the diet plan\n    const newDietPlan = dietPlan.meals.filter(savedMeal => JSON.stringify(savedMeal) !== JSON.stringify(meal));\n    setDietPlan({ meals: newDietPlan, babyMonth: dietPlan.babyMonth, stage: dietPlan.stage });\n  };\n  const handleMealDelete = (meal) => {\n    // Load the saved meals from localStorage\n    let savedMeals = localStorage.getItem('savedMeals');\n    savedMeals = savedMeals ? JSON.parse(savedMeals) : [];\n    \n    // Filter out the selected meal\n    savedMeals = savedMeals.filter(savedMeal => JSON.stringify(savedMeal) !== JSON.stringify(meal));\n    \n    // Save the updated meal list back to localStorage\n    localStorage.setItem('savedMeals', JSON.stringify(savedMeals));\n    \n    // Update the diet plan in the state\n    const newDietPlan = dietPlan.meals.filter(savedMeal => JSON.stringify(savedMeal) !== JSON.stringify(meal));\n    setDietPlan({ meals: newDietPlan, babyMonth: dietPlan.babyMonth, stage: dietPlan.stage });\n  };\n  \n  \n  useEffect(() => {\n    if (isRecipeTab) {\n      handleLoadSavedMeals();\n    }\n  }, [isRecipeTab]);\n\n  const handleLoadSavedMeals = () => {\n    // Load the saved meals from localStorage\n    let savedMeals = localStorage.getItem('savedMeals');\n    savedMeals = savedMeals ? JSON.parse(savedMeals) : [];\n    setDietPlan({ meals: savedMeals, babyMonth: null, stage: '저장된 ' });\n    setIsRecipeTab(true); // 수정: isRecipeTab 상태를 true로 변경\n  };\n  \n  \n  const handleFormSubmit = (menuCount, selectedMenuCount, selectedCategories, babyMonth, stage) => {\n    const plan = generateMealPlan(menuCount, selectedMenuCount, selectedCategories, babyMonth);\n    setDietPlan({ meals: plan, babyMonth, stage }); // Pass babyMonth and stage along with the meal plan\n  \n    // Save the diet plan to localStorage\n    localStorage.setItem('dietPlan', JSON.stringify({ meals: plan, babyMonth, stage }));\n  \n    // Save the input values\n    setLastInputValues({ menuCount, selectedMenuCount, selectedCategories, babyMonth, stage });\n  };\n  const [lastInputValues, setLastInputValues] = useState(null);\n  const handleRegeneratePlan = () => {\n    if (isRecipeTab) {\n      // If the user is in the recipe tab, reset to the initial form\n      setDietPlan(null);\n      setIsRecipeTab(false);\n      setLastInputValues(null);\n    } else if (lastInputValues) {\n      // If the user is in the menu result page and there are last input values, regenerate the plan based on them\n      const { menuCount, selectedMenuCount, selectedCategories, babyMonth, stage } = lastInputValues;\n      const plan = generateMealPlan(menuCount, selectedMenuCount, selectedCategories, babyMonth);\n      setDietPlan({ meals: plan, babyMonth, stage });\n    } else {\n      // If the user is in the menu result page and there are no last input values, reset to the initial form\n      setDietPlan(null);\n      setIsRecipeTab(false);\n    }\n  };\n  \n  return (\n    <Container className=\"App\">\n      {!dietPlan && (\n        <Row className=\"justify-content-md-center\">\n          <Col xs lg=\"6\">\n            <FoodSelectionForm onFormSubmit={handleFormSubmit} />\n          </Col>\n        </Row>\n      )}\n      {dietPlan && (\n        <div className=\"flex-grow-1 padded-top\">\n          <Row className=\"justify-content-md-center\">\n            <Col xs lg=\"6\">\n            <MealPlan\n              mealPlan={dietPlan.meals}\n              babyMonth={dietPlan.babyMonth}\n              stage={dietPlan.stage}\n              onRegeneratePlan={handleRegeneratePlan}\n              onMealSave={handleMealSave}\n              onMealDelete={handleMealDelete}\n              isRecipeTab={isRecipeTab} // 수정: isRecipeTab 상태를 MealPlan 컴포넌트에 전달\n            />\n            </Col>\n          </Row>\n        </div>\n      )}\n      <BottomNavbar className=\"fixed-bottom-navbar\" onRecipeClick={handleLoadSavedMeals} />\n    </Container>\n  );\n};\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}