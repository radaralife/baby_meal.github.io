{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["BottomNavbar","_ref","onRecipeClick","React","createElement","Navbar","fixed","bg","className","style","paddingTop","paddingBottom","borderTopLeftRadius","borderTopRightRadius","Nav","Link","color","href","onClick","event","preventDefault","MealPlan","_ref2","mealPlan","babyMonth","stage","onRegeneratePlan","onMealSave","onMealDelete","isRecipeTab","marginTop","concat","Row","xs","md","map","meal","index","badCombinationWarning","ingredients","item","ingredient","i","length","badCombinationMeat","badCombination","find","includes","checkBadCombination","allergenWarning","allergens","allergenVeggies","filter","allergenList","join","particle","word","lastChar","charAt","getSubjectParticle","checkAllergen","Col","Card","Body","Title","BsSave","marginLeft","BsFillTrash3Fill","Text","undefined","category","Alert","variant","marginBottom","Button","window","location","reload","generateMeal","selectedCategories","selectedIngredients","usedIngredients","selectedMenuCount","forEach","availableIngredients","has","ingredientIndex","Math","floor","random","push","generateMealPlan","menuCount","Set","Object","values","reduce","total","arr","alert","add","FoodSelectionForm","_ref3","onFormSubmit","_useState","useState","_useState2","_slicedToArray","step","setStep","_useState3","_useState4","setBabyMonth","_useState5","_useState6","setMenuCount","_useState7","_useState8","setSelectedMenuCount","_useState9","_useState10","setSelectedCategories","_useState11","_useState12","setSelectedIngredients","Form","onSubmit","currentCategory","totalSelectedIngredients","requiredIngredients","result","determineStage","Group","controlId","Label","Slider","axis","x","xmin","xmax","onChange","_ref4","styles","track","height","width","active","display","flexDirection","keys","categoryItems","month","margin","Check","type","id","label","value","checked","e","target","prevCategories","_toConsumableArray","flexWrap","prevIngredients","_objectSpread","_defineProperty","max","_ref5","_ref6","Stack","gap","justifyContent","App","_useState13","_useState14","setIsRecipeTab","_useState15","_useState16","dietPlan","setDietPlan","useEffect","handleLoadSavedMeals","savedMeals","localStorage","getItem","JSON","parse","meals","_useState17","_useState18","lastInputValues","setLastInputValues","Container","xxl","error","plan","setItem","stringify","newDietPlan","savedMeal","reportWebVitals","onPerfEntry","Function","__webpack_require__","then","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.dc91ee28.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Container, Row, Col, Button, Form } from 'react-bootstrap';\nimport Slider from 'react-input-slider';\n\nimport { Card, Stack } from 'react-bootstrap';\nimport { Alert } from 'react-bootstrap';\nimport { Navbar, Nav } from 'react-bootstrap';\nimport { BsFillTrash3Fill, BsSave } from \"react-icons/bs\";\n\nimport badCombinationMeat from './badCombinationMeat.json';\nimport allergenVeggies from './allergenVeggies.json';\nimport ingredients from './ingredients.json';\n\nconst BottomNavbar = ({ onRecipeClick }) => {\n  return (\n\n    <Navbar fixed=\"bottom\" bg=\"primary\" className=\"justify-content-around\" style={{ paddingTop: '20px', paddingBottom: '50px', borderTopLeftRadius: '20px', borderTopRightRadius: '20px' }}>\n      <Nav.Link style={{color:'white'}} href=\"#recipe\" onClick={(event) => {event.preventDefault(); onRecipeClick();}}>저장된 레시피</Nav.Link>\n      <Nav.Link style={{color:'white'}} href=\"#ranking\">랭킹 (기능 준비중)</Nav.Link>\n    </Navbar>\n\n  );\n};\n\nconst MealPlan = ({ mealPlan, babyMonth, stage, onRegeneratePlan, onMealSave, onMealDelete, isRecipeTab }) => {\n  const getSubjectParticle = (word) => {\n    const lastChar = word.charAt(word.length - 1);\n    // If the last character is a vowel, return '은'; otherwise, return '는'\n    return ['가', '나', '다', '라', '대', '린','림', '마', '망', '바', '사', '차', '콩', '타', '파', '하'].includes(lastChar) ? '은' : '는';\n  };\n    \n  const checkBadCombination = (meal) => {\n    const ingredients = meal.map(item => item.ingredient);\n    for (let i = 0; i < ingredients.length; i++) {\n      if (badCombinationMeat[ingredients[i]]) {\n        const badCombination = badCombinationMeat[ingredients[i]].find(ingredient => ingredients.includes(ingredient));\n        if (badCombination) {\n          return `${ingredients[i]}와 ${badCombination}은 좋지 않은 궁합`;\n        }\n      }\n    }\n    return null;\n  };\n\n  const checkAllergen = (meal) => {\n    const ingredients = meal.map(item => item.ingredient);\n    const allergens = allergenVeggies.filter(ingredient => ingredients.includes(ingredient));\n    if (allergens.length > 0) {\n      const allergenList = allergens.join(', ');\n      const particle = getSubjectParticle(allergenList);\n      return `${allergenList}${particle} 알레르기 유발할 수 있음`;\n    }\n    return null;\n  };\n  \n  \n  return (\n    <div>\n      <h2 className=\"text-center\" style={{ marginTop: '50px' }}>\n        {babyMonth ? `${babyMonth}개월 아기, ` : ''}{stage} 식단표\n        </h2>\n      <Row xs={1} md={2} className=\"g-4\" style={{ marginTop: '10px' }}>\n        {mealPlan.map((meal, index) => {\n          const badCombinationWarning = checkBadCombination(meal);\n          const allergenWarning = checkAllergen(meal);\n          return (\n            <Col>\n              <Card>\n                <Card.Body>\n                  <Card.Title>메뉴 {index + 1} \n                  {!isRecipeTab && <BsSave style={{ marginLeft: '10px'}} onClick={() => onMealSave(meal)} />}\n                  {!isRecipeTab && <BsFillTrash3Fill onClick={() => onMealDelete(meal)} style={{ marginLeft: '30px', color: 'red'}}/>}\n                  {isRecipeTab  && <BsFillTrash3Fill onClick={() => onMealDelete(meal)} style={{ marginLeft: '30px', color: 'red'}}/>}                  \n                  </Card.Title>\n                  <Card.Text>\n                  식재료: {meal.filter(item => item.ingredient !== undefined).map(item => `${item.ingredient} (${item.category})`).join(', ')}\n                  </Card.Text>\n                  {badCombinationWarning && <Alert variant=\"warning\">{badCombinationWarning}</Alert>}\n                  {allergenWarning && <Alert variant=\"danger\">{allergenWarning}</Alert>}\n                </Card.Body>\n              </Card>\n            </Col>\n          );\n        })}\n      </Row>\n      <Row className=\"text-center\">\n      {!isRecipeTab ? (\n        <div className=\"d-flex justify-content-center mt-3\" style={{ marginBottom: '70px' }}>\n          <Col>\n            <Button variant=\"success\" onClick={onRegeneratePlan}>\n              다시 생성\n            </Button>\n          </Col>\n          <Col>\n            <Button variant=\"primary\" style={{ marginBottom: '70px' }} onClick={() => window.location.reload()}>\n              처음으로\n            </Button>\n          </Col>\n        </div>\n      ) : (\n        <div style={{ marginBottom: '120px' }}>\n          <Col>\n            <Button variant=\"primary\" style={{ marginBottom: '70px' }} onClick={() => window.location.reload()}>\n              메뉴 생성하기\n            </Button>\n          </Col>\n        </div>\n      )}\n      </Row>\n    </div>\n  );\n};\nconst generateMeal = (selectedCategories, babyMonth, selectedIngredients, usedIngredients, selectedMenuCount, ingredients) => {\n  const meal = [];\n\n  selectedCategories.forEach((category) => {\n    if (selectedIngredients && selectedIngredients[category] && selectedIngredients[category].length > 0) {\n      // 사용된 식재료를 제외\n      const availableIngredients = selectedIngredients[category].filter(ingredient => !usedIngredients.has(ingredient));\n      if (availableIngredients.length === 0) return null; // 사용 가능한 식재료가 없는 경우\n\n      const ingredientIndex = Math.floor(Math.random() * availableIngredients.length);\n      meal.push({ ingredient: availableIngredients[ingredientIndex], category });\n    }\n  });\n\n  if (meal.length < selectedMenuCount) {\n    return null; // 선택된 식재료의 개수가 부족한 경우\n  }\n\n  return meal;\n};\n\nconst generateMealPlan = (menuCount, selectedMenuCount, selectedCategories, babyMonth, selectedIngredients, ingredients) => {\n  const mealPlan = [];\n  const usedIngredients = new Set();\n\n  // 선택된 식재료의 총 개수 확인\n  const totalSelectedIngredients = Object.values(selectedIngredients).reduce((total, arr) => total + arr.length, 0);\n\n  // 필요한 식재료의 총 개수\n  const requiredIngredients = selectedMenuCount * menuCount;\n\n  if (totalSelectedIngredients < requiredIngredients) {\n    return alert('총 식재료 개수가 부족합니다. 식재료를 더 선택해주세요.');\n  }\n\n  for (let i = 0; i < menuCount; i++) {\n    let meal = generateMeal(selectedCategories, babyMonth, selectedIngredients, usedIngredients, selectedMenuCount, ingredients);\n    if (!meal) {\n      // 부족한 식재료의 경우 처리\n      return alert('동일한 식재료를 사용하지 않으려면 더 많은 식재료를 선택해주세요.');\n    }\n\n    // 사용된 식재료 추적\n    meal.forEach(item => usedIngredients.add(item.ingredient));\n\n    mealPlan.push(meal);\n  }\n\n  return mealPlan;\n};\n\nconst FoodSelectionForm = ({ onFormSubmit }) => {\n  const [step, setStep] = useState(1);\n  const [babyMonth, setBabyMonth] = useState(8);\n  const [menuCount, setMenuCount] = useState(4);\n  const [selectedMenuCount, setSelectedMenuCount] = useState(3);\n  const [selectedCategories, setSelectedCategories] = useState([]);\n  const [selectedIngredients, setSelectedIngredients] = useState({});\n  \n  // Add a function to determine the stage based on the baby's month\n  const determineStage = (babyMonth) => {\n    if (babyMonth <= 6) {\n      return \"초기\";\n    } else if (babyMonth <= 9) {\n      return \"중기\";\n    } else if (babyMonth <= 12) {\n      return \"후기\";\n    } else {\n      return \"완료기\";\n    }\n  };\n   \n  const handleFormSubmit = (event) => {\n    event.preventDefault();\n  \n    // 식재료 종류 선택 단계에서 검사합니다.\n    if (step === 2 && selectedCategories.length === 0) {\n      alert('최소 한 가지 이상의 식재료 종류를 선택해주세요.');\n      return;\n    }\n    // 식재료 선택 단계에서 검사합니다.\n    if (step >= 3 && step < selectedCategories.length + 3) {\n      const currentCategory = selectedCategories[step - 3];\n      if (!selectedIngredients[currentCategory] || selectedIngredients[currentCategory].length === 0) {\n        alert(`'${currentCategory}' 범주에서 최소 한 가지 이상의 식재료를 선택해주세요.`);\n        return;\n      }\n    }\n    if (step === selectedCategories.length + 3) {\n      // 선택된 식재료의 총 개수 확인\n      const totalSelectedIngredients = Object.values(selectedIngredients).reduce((total, arr) => total + arr.length, 0);\n    \n      // 선택된 식재료의 총 개수가 최소 개수보다 적은 경우\n      if (totalSelectedIngredients < 1) {\n        alert('최소 2개의 식재료를 선택해주세요.');\n        return;\n      }\n      setStep(step + 1);\n    } else if (step === selectedCategories.length + 5) {\n      // 식재료의 총 개수 확인\n      const totalSelectedIngredients = Object.values(selectedIngredients).reduce((total, arr) => total + arr.length, 0);\n      const requiredIngredients = selectedMenuCount * menuCount;\n  \n      if (totalSelectedIngredients < requiredIngredients) {\n        const lackingIngredients = requiredIngredients - totalSelectedIngredients; // 부족한 식재료의 개수 계산\n        alert(`총 식재료 개수가 부족합니다. ${lackingIngredients+1}개의 식재료를 더 선택해주세요.`);\n        setStep(2); // \"식재료 범주 선택\" 단계로 돌아갑니다.\n        return;\n      }\n  \n      // 식단표 생성\n      const result = generateMealPlan(menuCount, selectedMenuCount, selectedCategories, babyMonth, selectedIngredients, ingredients);\n      if (result) {\n        const stage = determineStage(babyMonth);\n        onFormSubmit(menuCount, selectedMenuCount, selectedCategories, selectedIngredients, babyMonth, stage, result);\n      }\n    } else {\n      // 그 외의 경우\n      setStep(step + 1);\n    }\n  };\n  \n  \n  const handleIngredientSelection = (category, value) => {\n    setSelectedIngredients((prevIngredients) => {\n      // Check if the category already has selected ingredients\n      if (prevIngredients[category]) {\n        // If the ingredient is already selected, remove it\n        if (prevIngredients[category].includes(value)) {\n          return {\n            ...prevIngredients,\n            [category]: prevIngredients[category].filter((item) => item !== value),\n          };\n        }\n        // If the ingredient is not selected, add it\n        else {\n          return {\n            ...prevIngredients,\n            [category]: [...prevIngredients[category], value],\n          };\n        }\n      }\n      // If the category does not have any selected ingredients, add the new ingredient\n      else {\n        return {\n          ...prevIngredients,\n          [category]: [value],\n        };\n      }\n    });\n  };\n  \n  // 이전 버튼을 처리하기 위한 함수를 추가합니다.\n  const handlePreviousStep = () => {\n    setStep(step - 1);\n  };\n\n  return (\n    <Form className=\"container-sm\" onSubmit={handleFormSubmit} style={{ marginTop: '50px' }}>\n      {step === 1 && (\n        <Form.Group className=\"mb-3\" controlId=\"formBabyMonth\">\n          <h2><Form.Label>아기의 나이를 선택하세요</Form.Label></h2>\n          <Slider\n            axis=\"x\"\n            x={babyMonth}\n            xmin={4}\n            xmax={12}\n            onChange={({ x }) => setBabyMonth(x)}\n            styles={{\n              track: {\n                height: '14px', // 높이를 원하는 크기로 설정\n                width: '100%'\n              },\n              active: {\n                height: '14px', // 높이를 원하는 크기로 설정\n                width: '100%'\n              }\n            }}\n          />\n          <div>선택된 개월 수: {babyMonth}</div>\n        </Form.Group>\n      )}\n      {step === 2 && (\n        <Form.Group className=\"mb-3\" controlId=\"formSelectedCategories\">\n          <h2><Form.Label>식재료 종류를 선택하세요</Form.Label></h2>\n          <div style={{ display: 'flex', flexDirection: 'column'}}>\n\n              {Object.keys(ingredients).map((category) => {\n                let categoryItems = [];\n                for (let month = 4; month <= babyMonth; month++) {\n                  if (ingredients[category][month]) {\n                    categoryItems = categoryItems.concat(ingredients[category][month]);\n                  }\n                }\n                if (categoryItems.length > 0) {\n                  return (\n                    <div style={{ width: '40%', margin: '4px 0' }}>\n                      <Form.Check className=\"fs-5\"\n                        type=\"checkbox\"\n                        id={category} // 추가한 id 속성\n                        label={category}\n                        value={category}\n                        checked={selectedCategories.includes(category)} // 이 부분을 수정\n                        onChange={(e) => {\n                          const value = e.target.value;\n                          setSelectedCategories((prevCategories) =>\n                            prevCategories.includes(value)\n                              ? prevCategories.filter((category) => category !== value)\n                              : [...prevCategories, value]\n                            );\n                          }}\n                      />\n                    </div>\n                  );\n                }\n                return null; // categoryItems.length가 0인 경우 null을 반환\n              })}\n          </div>\n        </Form.Group>\n      )}\n      {step === selectedCategories.length + 3 && (\n        <div>\n          <h2>Tip</h2>\n          <div style={{ marginBottom: '10px' }}>\n            불편한 점이 있으시면 문의해주세요 ^^\n          </div>\n          \n          {/* 이곳에 리뷰를 남길 수 있는 폼이나 다른 요소들을 추가하면 됩니다. */}\n        </div>\n      )}\n      {step >= 3 && step < selectedCategories.length + 3 && (\n        (() => {\n          let categoryItems = [];\n          for (let month = 4; month <= babyMonth; month++) {\n            if (ingredients[selectedCategories[step - 3]][month]) {\n              categoryItems = categoryItems.concat(ingredients[selectedCategories[step - 3]][month]);\n            }\n          }\n\n          return (\n            <Form.Group className=\"mb-3\" controlId={`formSelectedIngredients-${selectedCategories[step - 3]}`}>\n              <h2><Form.Label>{selectedCategories[step - 3]}의 식재료를 선택하세요</Form.Label></h2>\n              <div style={{ display: 'flex', flexDirection: 'column'}}>\n                <div style={{ display: 'flex', flexWrap: 'wrap'}}>\n                  {categoryItems.map((item) => (\n                    <div style={{ width: '50%', margin: '4px 0' }}>\n                      <Form.Check className=\"fs-6\" // 라벨의 크기를 조정하는 클래스를 추가합니다.\n                        type=\"checkbox\"\n                        id={item}\n                        label={item}\n                        value={item}\n                        checked={selectedIngredients[selectedCategories[step - 3]] ? selectedIngredients[selectedCategories[step - 3]].includes(item) : false}\n                        onChange={(e) => handleIngredientSelection(selectedCategories[step - 3], e.target.value)}\n                      />\n                    </div>\n                  ))}\n                </div>\n              </div>\n            </Form.Group>\n          )\n        })()\n      )}\n      {step === Math.max(4, selectedCategories.length + 4) && (\n        <Form.Group className=\"mb-3\" controlId=\"formSelectedMenuCount\">\n          <h2><Form.Label>식재료의 개수를 선택하세요</Form.Label></h2>\n          <Slider\n            axis=\"x\"\n            x={selectedMenuCount}\n            xmin={1}\n            xmax={5}\n            onChange={({ x }) => setSelectedMenuCount(x)}\n            styles={{\n              track: {\n                height: '14px', // 높이를 원하는 크기로 설정\n                width: '100%'\n              },\n              active: {\n                height: '14px', // 높이를 원하는 크기로 설정\n                width: '100%'\n              }\n            }}\n          />\n          <div>선택된 조합 식재료 종류: {selectedMenuCount}</div>\n        </Form.Group>\n      )}\n      {step === selectedCategories.length + 5 && (   \n        <Form.Group className=\"mb-3\" controlId=\"formMenuCount\">\n          <h2><Form.Label>생성할 메뉴 개수를 선택하세요</Form.Label></h2>\n          <Slider\n            axis=\"x\"\n            x={menuCount}\n            xmin={1}\n            xmax={7}\n            onChange={({ x }) => setMenuCount(x)}\n            styles={{\n              track: {\n                height: '14px', // 높이를 원하는 크기로 설정\n                width: '100%'\n              },\n              active: {\n                height: '14px', // 높이를 원하는 크기로 설정\n                width: '100%'\n              }\n            }}\n          />\n          <div>선택된 메뉴 개수: {menuCount}</div>\n        </Form.Group>\n      )}\n      <Stack gap={5}>\n      <div style={{ display: 'flex', justifyContent: 'space-between' }}>\n        {/* 이전 버튼을 추가합니다. 첫 단계에서는 보이지 않게 합니다. */}\n        {step > 1 && (\n          <Button variant=\"secondary\" onClick={handlePreviousStep} style={{ width: '48%' }}>\n            이전\n          </Button>\n        )}\n        <Button\n          variant=\"primary\"\n          type=\"submit\"\n          style={{\n            width: step === 1 ? '100%' : '48%',\n            marginLeft: step > 1 ? '10px' : '0px',\n          }}\n        >\n          {step === selectedCategories.length + 5 ? '식단표 생성하기' : '다음'}\n        </Button>\n      </div>\n      <h3 className=\"text-center\" style={{ marginBottom: '90px' }}>{step} / {selectedCategories.length + 5}</h3>\n    </Stack>\n  </Form>\n  );\n};\n\nconst App = () => {\n  const [isRecipeTab, setIsRecipeTab] = useState(false);\n  const [dietPlan, setDietPlan] = useState(null);\n\n  const handleMealSave = (meal) => {\n    // Save the meal to localStorage\n    let savedMeals = localStorage.getItem('savedMeals');\n    savedMeals = savedMeals ? JSON.parse(savedMeals) : [];\n    savedMeals.push(meal);\n    localStorage.setItem('savedMeals', JSON.stringify(savedMeals));\n  \n    // Remove the saved meal from the diet plan\n    const newDietPlan = dietPlan.meals.filter(savedMeal => JSON.stringify(savedMeal) !== JSON.stringify(meal));\n    setDietPlan({ meals: newDietPlan, babyMonth: dietPlan.babyMonth, stage: dietPlan.stage });\n  };\n  const handleMealDelete = (meal) => {\n    // Load the saved meals from localStorage\n    let savedMeals = localStorage.getItem('savedMeals');\n    savedMeals = savedMeals ? JSON.parse(savedMeals) : [];\n    \n    // Filter out the selected meal\n    savedMeals = savedMeals.filter(savedMeal => JSON.stringify(savedMeal) !== JSON.stringify(meal));\n    \n    // Save the updated meal list back to localStorage\n    localStorage.setItem('savedMeals', JSON.stringify(savedMeals));\n    \n    // Update the diet plan in the state\n    const newDietPlan = dietPlan.meals.filter(savedMeal => JSON.stringify(savedMeal) !== JSON.stringify(meal));\n    setDietPlan({ meals: newDietPlan, babyMonth: dietPlan.babyMonth, stage: dietPlan.stage });\n  };\n  \n  \n  useEffect(() => {\n    if (isRecipeTab) {\n      handleLoadSavedMeals();\n    }\n  }, [isRecipeTab]);\n\n  const handleLoadSavedMeals = () => {\n    // Load the saved meals from localStorage\n    let savedMeals = localStorage.getItem('savedMeals');\n    savedMeals = savedMeals ? JSON.parse(savedMeals) : [];\n    setDietPlan({ meals: savedMeals, babyMonth: null, stage: '저장된 ' });\n    setIsRecipeTab(true); // 수정: isRecipeTab 상태를 true로 변경\n  };\n  \n  const handleFormSubmit = (menuCount, selectedMenuCount, selectedCategories, selectedIngredients, babyMonth, stage) => {\n    const result = generateMealPlan(menuCount, selectedMenuCount, selectedCategories, babyMonth, selectedIngredients, ingredients);\n    \n    if (result.error) {\n      alert(result.error);\n    } else {\n      setDietPlan({ meals: result, babyMonth, stage });\n      setLastInputValues({ menuCount, selectedMenuCount, selectedCategories, babyMonth, stage, selectedIngredients });\n      setIsRecipeTab(false);\n    }\n  };\n  \n  const [lastInputValues, setLastInputValues] = useState(null);\n  const handleRegeneratePlan = () => {\n    if (isRecipeTab) {\n      // If the user is in the recipe tab, reset to the initial form\n      setDietPlan(null);\n      setIsRecipeTab(false);\n      setLastInputValues(null);\n    } else if (lastInputValues) {\n      const { menuCount, selectedMenuCount, selectedCategories, babyMonth, stage, selectedIngredients } = lastInputValues;\n      const plan = generateMealPlan(menuCount, selectedMenuCount, selectedCategories, babyMonth, selectedIngredients, ingredients);\n      setDietPlan({ meals: plan, babyMonth, stage });\n    } else {\n      alert('이전에 선택된 값이 없어 식단표를 다시 생성할 수 없습니다.');\n    }\n  };\n  \n  return (\n    <Container className=\"App\">\n      {!dietPlan && (\n        <Row xxl className=\"container-fluid\" >\n          <Col xxl>\n            <FoodSelectionForm onFormSubmit={handleFormSubmit} />\n          </Col>\n        </Row>\n      )}\n      {dietPlan && (\n        <div className=\"flex-grow-1 padded-top\">\n          <Row className=\"justify-content-md-center\">\n            <Col xxl={1}>\n            <MealPlan\n              mealPlan={dietPlan.meals}\n              babyMonth={dietPlan.babyMonth}\n              stage={dietPlan.stage}\n              onRegeneratePlan={handleRegeneratePlan}\n              onMealSave={handleMealSave}\n              onMealDelete={handleMealDelete}\n              isRecipeTab={isRecipeTab} // 수정: isRecipeTab 상태를 MealPlan 컴포넌트에 전달\n            />\n            </Col>\n          </Row>\n        </div>\n      )}\n      <BottomNavbar className=\"fixed-bottom-navbar\" onRecipeClick={handleLoadSavedMeals} />\n    </Container>\n  );\n};\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}