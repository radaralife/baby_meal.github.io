{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["BottomNavbar","_ref","onRecipeClick","React","createElement","Navbar","fixed","bg","className","style","paddingTop","paddingBottom","borderTopLeftRadius","borderTopRightRadius","Nav","Link","color","href","onClick","event","preventDefault","MealPlan","_ref2","mealPlan","babyMonth","stage","onRegeneratePlan","onMealSave","onMealDelete","isRecipeTab","Array","isArray","marginTop","concat","Row","xs","md","map","meal","index","badCombinationWarning","ingredients","item","ingredient","i","length","badCombinationMeat","badCombination","find","includes","checkBadCombination","allergenWarning","allergens","allergenVeggies","filter","allergenList","join","particle","word","lastChar","charAt","getSubjectParticle","checkAllergen","Col","Card","Body","Title","BsSave","marginLeft","BsFillTrash3Fill","Text","undefined","category","Alert","variant","marginBottom","Button","window","location","reload","generateMeal","selectedCategories","selectedIngredients","selectedMenuCount","Math","floor","random","ingredientIndex","splice","push","generateMealPlan","menuCount","JSON","parse","stringify","error","FoodSelectionForm","_ref3","onFormSubmit","_useState","useState","_useState2","_slicedToArray","step","setStep","_useState3","_useState4","setBabyMonth","_useState5","_useState6","setMenuCount","_useState7","_useState8","setSelectedMenuCount","_useState9","_useState10","setSelectedCategories","_useState11","_useState12","setSelectedIngredients","_useState13","_useState14","tip","setTip","useEffect","randomIndex","babyTips","Form","onSubmit","currentCategory","alert","Object","values","reduce","total","arr","totalSelectedIngredients","requiredIngredients","result","determineStage","Group","controlId","Label","Slider","axis","x","xmin","xmax","onChange","_ref4","styles","track","height","width","active","display","flexDirection","keys","categoryItems","month","margin","Check","type","id","label","value","checked","e","target","prevCategories","_toConsumableArray","allSelected","fontWeight","isChecked","allItems","prevIngredients","_objectSpread","_defineProperty","flexWrap","handleIngredientSelection","max","_ref5","_ref6","Stack","gap","justifyContent","App","_useState15","_useState16","setIsRecipeTab","_useState17","_useState18","dietPlan","setDietPlan","handleLoadSavedMeals","savedMeals","localStorage","getItem","meals","_useState19","_useState20","lastInputValues","setLastInputValues","Container","xxl","selectedIngredientsCopy","plan","setItem","newDietPlan","savedMeal","reportWebVitals","onPerfEntry","Function","__webpack_require__","then","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.f9f6f0f6.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Container, Row, Col, Button, Form } from 'react-bootstrap';\nimport Slider from 'react-input-slider';\n\nimport { Card, Stack } from 'react-bootstrap';\nimport { Alert } from 'react-bootstrap';\nimport { Navbar, Nav } from 'react-bootstrap';\nimport { BsFillTrash3Fill, BsSave } from \"react-icons/bs\";\n\nimport badCombinationMeat from './badCombinationMeat.json';\nimport allergenVeggies from './allergenVeggies.json';\nimport ingredients from './ingredients.json';\nimport babyTips from './babyTips.json';\n\n\nconst BottomNavbar = ({ onRecipeClick }) => {\n  return (\n\n    <Navbar fixed=\"bottom\" bg=\"primary\" className=\"justify-content-around\" style={{ paddingTop: '20px', paddingBottom: '50px', borderTopLeftRadius: '20px', borderTopRightRadius: '20px' }}>\n      <Nav.Link style={{color:'white'}} href=\"#recipe\" onClick={(event) => {event.preventDefault(); onRecipeClick();}}>저장된 레시피</Nav.Link>\n      <Nav.Link style={{color:'white'}} href=\"#ranking\">랭킹 (기능 준비중)</Nav.Link>\n    </Navbar>\n\n  );\n};\n\nconst MealPlan = ({ mealPlan, babyMonth, stage, onRegeneratePlan, onMealSave, onMealDelete, isRecipeTab }) => {\n  const getSubjectParticle = (word) => {\n    const lastChar = word.charAt(word.length - 1);\n    // If the last character is a vowel, return '은'; otherwise, return '는'\n    return ['가', '나', '다', '라', '대', '린','림', '마', '망', '바', '사', '차', '콩', '타', '파', '하'].includes(lastChar) ? '은' : '는';\n  };\n    \n  const checkBadCombination = (meal) => {\n    const ingredients = meal.map(item => item.ingredient);\n    for (let i = 0; i < ingredients.length; i++) {\n      if (badCombinationMeat[ingredients[i]]) {\n        const badCombination = badCombinationMeat[ingredients[i]].find(ingredient => ingredients.includes(ingredient));\n        if (badCombination) {\n          return `${ingredients[i]}와 ${badCombination}은 좋지 않은 궁합`;\n        }\n      }\n    }\n    \n    return null;\n  };\n\n  const checkAllergen = (meal) => {\n    const ingredients = meal.map(item => item.ingredient);\n    const allergens = allergenVeggies.filter(ingredient => ingredients.includes(ingredient));\n    if (allergens.length > 0) {\n      const allergenList = allergens.join(', ');\n      const particle = getSubjectParticle(allergenList);\n      return `${allergenList}${particle} 알레르기 유발할 수 있음`;\n    }\n    return null;\n  };\n  \n    // mealPlan이 배열인지 확인\n    if (!Array.isArray(mealPlan)) {\n      return <div>Error: mealPlan must be an array!</div>;\n    }\n    \n  return (\n    <div>\n      <h2 className=\"text-center\" style={{ marginTop: '50px' }}>\n        {babyMonth ? `${babyMonth}개월 아기, ` : ''}{stage} 식단표\n        </h2>\n      <Row xs={1} md={2} className=\"g-4\" style={{ marginTop: '10px' }}>\n        {mealPlan.map((meal, index) => {\n          const badCombinationWarning = checkBadCombination(meal);\n          const allergenWarning = checkAllergen(meal);\n          return (\n            <Col>\n              <Card>\n                <Card.Body>\n                  <Card.Title>메뉴 {index + 1} \n                  {!isRecipeTab && <BsSave style={{ marginLeft: '10px'}} onClick={() => onMealSave(meal)} />}\n                  {!isRecipeTab && <BsFillTrash3Fill onClick={() => onMealDelete(meal)} style={{ marginLeft: '30px', color: 'red'}}/>}\n                  {isRecipeTab  && <BsFillTrash3Fill onClick={() => onMealDelete(meal)} style={{ marginLeft: '30px', color: 'red'}}/>}                  \n                  </Card.Title>\n                  <Card.Text>\n                  식재료: {meal.filter(item => item.ingredient !== undefined).map(item => `${item.ingredient} (${item.category})`).join(', ')}\n                  </Card.Text>\n                  {badCombinationWarning && <Alert variant=\"warning\">{badCombinationWarning}</Alert>}\n                  {allergenWarning && <Alert variant=\"danger\">{allergenWarning}</Alert>}\n                </Card.Body>\n              </Card>\n            </Col>\n          );\n        })}\n      </Row>\n      <Row className=\"text-center\">\n      {!isRecipeTab ? (\n        <div className=\"d-flex justify-content-center mt-3\" style={{ marginBottom: '70px' }}>\n          <Col>\n            <Button variant=\"success\" onClick={onRegeneratePlan}>\n              다시 생성\n            </Button>\n          </Col>\n          <Col>\n            <Button variant=\"primary\" style={{ marginBottom: '70px' }} onClick={() => window.location.reload()}>\n              처음으로\n            </Button>\n          </Col>\n        </div>\n      ) : (\n        <div style={{ marginBottom: '120px' }}>\n          <Col>\n            <Button variant=\"primary\" style={{ marginBottom: '70px' }} onClick={() => window.location.reload()}>\n              메뉴 생성하기\n            </Button>\n          </Col>\n        </div>\n      )}\n      </Row>\n    </div>\n  );\n};\nconst generateMeal = (selectedCategories, babyMonth, selectedIngredients, selectedMenuCount) => {\n  const meal = [];\n\n  // 사용자가 선택한 식재료 중에서 무작위로 선택\n  while (meal.length < selectedMenuCount) {\n    const categoryIndex = Math.floor(Math.random() * selectedCategories.length);\n    const category = selectedCategories[categoryIndex];\n\n    if (selectedIngredients[category] && selectedIngredients[category].length > 0) {\n      const ingredientIndex = Math.floor(Math.random() * selectedIngredients[category].length);\n      const ingredient = selectedIngredients[category][ingredientIndex];\n\n      // 중복 식재료를 피하기 위해 선택한 식재료 제거\n      selectedIngredients[category].splice(ingredientIndex, 1);\n\n      meal.push({ ingredient, category });\n    } else {\n      // 사용 가능한 식재료가 없는 경우\n      return null; // 중요: null 반환\n    }\n  }\n\n  return meal;\n};\n\n\nconst generateMealPlan = (menuCount, selectedMenuCount, selectedCategories, babyMonth, selectedIngredients, ingredients) => {\n  const mealPlan = [];\n\n  // 메뉴 수만큼 반복하여 식단 생성\n  for (let i = 0; i < menuCount; i++) {\n    const meal = generateMeal(selectedCategories, babyMonth, JSON.parse(JSON.stringify(selectedIngredients)), selectedMenuCount); // 선택된 식재료의 복사본을 전달\n    if (!meal) {\n      return { error: `더 많은 식재료를 선택해주세요. ${selectedMenuCount}개의 추가 식재료가 필요합니다.` };\n    }\n    mealPlan.push(meal);\n  }\n\n  return mealPlan;\n};\n\n\n\n\nconst FoodSelectionForm = ({ onFormSubmit }) => {\n  const [step, setStep] = useState(1);\n  const [babyMonth, setBabyMonth] = useState(8);\n  const [menuCount, setMenuCount] = useState(4);\n  const [selectedMenuCount, setSelectedMenuCount] = useState(3);\n  const [selectedCategories, setSelectedCategories] = useState([]);\n  const [selectedIngredients, setSelectedIngredients] = useState({});\n  \n  // Add a function to determine the stage based on the baby's month\n  const determineStage = (babyMonth) => {\n    if (babyMonth <= 6) {\n      return \"초기\";\n    } else if (babyMonth <= 9) {\n      return \"중기\";\n    } else if (babyMonth <= 12) {\n      return \"후기\";\n    } else {\n      return \"완료기\";\n    }\n  };\n   \n  const handleFormSubmit = (event) => {\n    event.preventDefault();\n  \n    // 식재료 종류 선택 단계에서 검사합니다.\n    if (step === 2 && selectedCategories.length === 0) {\n      alert('최소 한 가지 이상의 식재료 종류를 선택해주세요.');\n      return;\n    }\n    // 식재료 선택 단계에서 검사합니다.\n    if (step >= 3 && step < selectedCategories.length + 3) {\n      const currentCategory = selectedCategories[step - 3];\n      if (!selectedIngredients[currentCategory] || selectedIngredients[currentCategory].length === 0) {\n        alert(`'${currentCategory}' 범주에서 최소 한 가지 이상의 식재료를 선택해주세요.`);\n        return;\n      }\n    }\n    if (step === selectedCategories.length + 3) {\n      // 선택된 식재료의 총 개수 확인\n      const totalSelectedIngredients = Object.values(selectedIngredients).reduce((total, arr) => total + arr.length, 0);\n    \n      // 선택된 식재료의 총 개수가 최소 개수보다 적은 경우\n      if (totalSelectedIngredients < 1) {\n        alert('최소 2개의 식재료를 선택해주세요.');\n        return;\n      }\n      setStep(step + 1);\n    } else if (step === selectedCategories.length + 5) {\n      // 식재료의 총 개수 확인\n      const totalSelectedIngredients = Object.values(selectedIngredients).reduce((total, arr) => total + arr.length, 0);\n      const requiredIngredients = selectedMenuCount * menuCount;\n      \n      if (totalSelectedIngredients < requiredIngredients) {\n        const lackingIngredients = requiredIngredients - totalSelectedIngredients; // 부족한 식재료의 개수 계산\n        alert(`총 식재료 개수가 부족합니다. ${lackingIngredients+1}개의 식재료를 더 선택해주세요.`);\n        setStep(2); // \"식재료 범주 선택\" 단계로 돌아갑니다.\n        return;\n      }\n      \n      // 식단표 생성\n      const result = generateMealPlan(menuCount, selectedMenuCount, selectedCategories, babyMonth, selectedIngredients, ingredients);\n      if (result) {\n        const stage = determineStage(babyMonth);\n        onFormSubmit(menuCount, selectedMenuCount, selectedCategories, selectedIngredients, babyMonth, stage, result);\n      }\n    } else {\n      // 그 외의 경우\n      setStep(step + 1);\n    }\n  };\n  \n  \n  const handleIngredientSelection = (category, value) => {\n    setSelectedIngredients((prevIngredients) => {\n      // Check if the category already has selected ingredients\n      if (prevIngredients[category]) {\n        // If the ingredient is already selected, remove it\n        if (prevIngredients[category].includes(value)) {\n          return {\n            ...prevIngredients,\n            [category]: prevIngredients[category].filter((item) => item !== value),\n          };\n        }\n        // If the ingredient is not selected, add it\n        else {\n          return {\n            ...prevIngredients,\n            [category]: [...prevIngredients[category], value],\n          };\n        }\n      }\n      // If the category does not have any selected ingredients, add the new ingredient\n      else {\n        return {\n          ...prevIngredients,\n          [category]: [value],\n        };\n      }\n    });\n  };\n  \n  // 이전 버튼을 처리하기 위한 함수를 추가합니다.\n  const handlePreviousStep = () => {\n    setStep(step - 1);\n  };\n\n  const [tip, setTip] = useState('');\n\n  useEffect(() => {\n    const randomIndex = Math.floor(Math.random() * babyTips.length);\n    setTip(babyTips[randomIndex]);\n  }, [step]); // step이 변경될 때마다 새 팁을 선택합니다.\n \n    \n  return (\n    <Form className=\"container-sm\" onSubmit={handleFormSubmit} style={{ marginTop: '50px' }}>\n      {step === 1 && (\n        <Form.Group className=\"mb-3\" controlId=\"formBabyMonth\">\n          <h2><Form.Label>아기의 나이를 선택하세요</Form.Label></h2>\n          <Slider\n            axis=\"x\"\n            x={babyMonth}\n            xmin={4}\n            xmax={12}\n            onChange={({ x }) => setBabyMonth(x)}\n            styles={{\n              track: {\n                height: '14px', // 높이를 원하는 크기로 설정\n                width: '100%'\n              },\n              active: {\n                height: '14px', // 높이를 원하는 크기로 설정\n                width: '100%'\n              }\n            }}\n          />\n          <div>선택된 개월 수: {babyMonth}</div>\n        </Form.Group>\n      )}\n      {step === 2 && (\n        <Form.Group className=\"mb-3\" controlId=\"formSelectedCategories\">\n          <h2><Form.Label>식재료 종류를 선택하세요</Form.Label></h2>\n          <div style={{ display: 'flex', flexDirection: 'column'}}>\n\n              {Object.keys(ingredients).map((category) => {\n                let categoryItems = [];\n                for (let month = 4; month <= babyMonth; month++) {\n                  if (ingredients[category][month]) {\n                    categoryItems = categoryItems.concat(ingredients[category][month]);\n                  }\n                }\n                if (categoryItems.length > 0) {\n                  return (\n                    <div style={{ width: '40%', margin: '4px 0' }}>\n                      <Form.Check className=\"fs-5\"\n                        type=\"checkbox\"\n                        id={category} // 추가한 id 속성\n                        label={category}\n                        value={category}\n                        checked={selectedCategories.includes(category)} // 이 부분을 수정\n                        onChange={(e) => {\n                          const value = e.target.value;\n                          setSelectedCategories((prevCategories) =>\n                            prevCategories.includes(value)\n                              ? prevCategories.filter((category) => category !== value)\n                              : [...prevCategories, value]\n                            );\n                          }}\n                      />\n                    </div>\n                  );\n                }\n                return null; // categoryItems.length가 0인 경우 null을 반환\n              })}\n          </div>\n        </Form.Group>\n      )}\n      {step === selectedCategories.length + 3 && (\n        <div>\n          <h2>Tip</h2>\n          <div style={{ marginBottom: '10px' }}>\n            {tip}\n          </div>\n          {/* 이곳에 리뷰를 남길 수 있는 폼이나 다른 요소들을 추가하면 됩니다. */}\n        </div>\n      )}\n      {step >= 3 && step < selectedCategories.length + 3 && (\n        (() => {\n          const category = selectedCategories[step - 3];\n          let categoryItems = [];\n          for (let month = 4; month <= babyMonth; month++) {\n            if (ingredients[category][month]) {\n              categoryItems = categoryItems.concat(ingredients[category][month]);\n            }\n          }\n\n          const handleSelectAll = (e) => {\n            const isChecked = e.target.checked;\n            const allItems = categoryItems;\n            setSelectedIngredients((prevIngredients) => ({\n              ...prevIngredients,\n              [category]: isChecked ? allItems : [],\n            }));\n          };\n\n          // Check if all items are selected\n          const allSelected = selectedIngredients[category] && selectedIngredients[category].length === categoryItems.length;\n\n          return (\n            <Form.Group className=\"mb-3\" controlId={`formSelectedIngredients-${category}`}>\n              <h2>\n                <Form.Label>{category}의 식재료를 선택하세요</Form.Label>\n              </h2>\n              <div style={{ display: 'flex', flexDirection: 'column' }}>\n                <Form.Check\n                  type=\"checkbox\"\n                  id={`selectAll-${category}`}\n                  label={<span style={{ fontWeight: 'bold' }}>전체 선택</span>}\n                  checked={allSelected}\n                  onChange={handleSelectAll}\n                />\n                <div style={{ display: 'flex', flexWrap: 'wrap' }}>\n                  {categoryItems.map((item) => (\n                    <div style={{ width: '50%', margin: '4px 0' }}>\n                      <Form.Check\n                        className=\"fs-6\" // 라벨의 크기를 조정하는 클래스를 추가합니다.\n                        type=\"checkbox\"\n                        id={item}\n                        label={item}\n                        value={item}\n                        checked={selectedIngredients[category] ? selectedIngredients[category].includes(item) : false}\n                        onChange={(e) => handleIngredientSelection(category, e.target.value)}\n                      />\n                    </div>\n                  ))}\n                </div>\n              </div>\n            </Form.Group>\n          );\n        })()\n      )}\n      {step === Math.max(4, selectedCategories.length + 4) && (\n        <Form.Group className=\"mb-3\" controlId=\"formSelectedMenuCount\">\n          <h2><Form.Label>식재료의 개수를 선택하세요</Form.Label></h2>\n          <Slider\n            axis=\"x\"\n            x={selectedMenuCount}\n            xmin={1}\n            xmax={5}\n            onChange={({ x }) => setSelectedMenuCount(x)}\n            styles={{\n              track: {\n                height: '14px', // 높이를 원하는 크기로 설정\n                width: '100%'\n              },\n              active: {\n                height: '14px', // 높이를 원하는 크기로 설정\n                width: '100%'\n              }\n            }}\n          />\n          <div>선택된 조합 식재료 종류: {selectedMenuCount}</div>\n        </Form.Group>\n      )}\n      {step === selectedCategories.length + 5 && (   \n        <Form.Group className=\"mb-3\" controlId=\"formMenuCount\">\n          <h2><Form.Label>생성할 메뉴 개수를 선택하세요</Form.Label></h2>\n          <Slider\n            axis=\"x\"\n            x={menuCount}\n            xmin={1}\n            xmax={7}\n            onChange={({ x }) => setMenuCount(x)}\n            styles={{\n              track: {\n                height: '14px', // 높이를 원하는 크기로 설정\n                width: '100%'\n              },\n              active: {\n                height: '14px', // 높이를 원하는 크기로 설정\n                width: '100%'\n              }\n            }}\n          />\n          <div>선택된 메뉴 개수: {menuCount}</div>\n        </Form.Group>\n      )}\n      <Stack gap={5}>\n      <div style={{ display: 'flex', justifyContent: 'space-between' }}>\n        {/* 이전 버튼을 추가합니다. 첫 단계에서는 보이지 않게 합니다. */}\n        {step > 1 && (\n          <Button variant=\"secondary\" onClick={handlePreviousStep} style={{ width: '48%' }}>\n            이전\n          </Button>\n        )}\n        <Button\n          variant=\"primary\"\n          type=\"submit\"\n          style={{\n            width: step === 1 ? '100%' : '48%',\n            marginLeft: step > 1 ? '10px' : '0px',\n          }}\n        >\n          {step === selectedCategories.length + 5 ? '식단표 생성하기' : '다음'}\n        </Button>\n      </div>\n      <h3 className=\"text-center\" style={{ marginBottom: '90px' }}>{step} / {selectedCategories.length + 5}</h3>\n    </Stack>\n  </Form>\n  );\n};\n\nconst App = () => {\n  const [isRecipeTab, setIsRecipeTab] = useState(false);\n  const [dietPlan, setDietPlan] = useState(null);\n\n  const handleMealSave = (meal) => {\n    // Save the meal to localStorage\n    let savedMeals = localStorage.getItem('savedMeals');\n    savedMeals = savedMeals ? JSON.parse(savedMeals) : [];\n    savedMeals.push(meal);\n    localStorage.setItem('savedMeals', JSON.stringify(savedMeals));\n  \n    // Remove the saved meal from the diet plan\n    const newDietPlan = dietPlan.meals.filter(savedMeal => JSON.stringify(savedMeal) !== JSON.stringify(meal));\n    setDietPlan({ meals: newDietPlan, babyMonth: dietPlan.babyMonth, stage: dietPlan.stage });\n  };\n  const handleMealDelete = (meal) => {\n    // Load the saved meals from localStorage\n    let savedMeals = localStorage.getItem('savedMeals');\n    savedMeals = savedMeals ? JSON.parse(savedMeals) : [];\n    \n    // Filter out the selected meal\n    savedMeals = savedMeals.filter(savedMeal => JSON.stringify(savedMeal) !== JSON.stringify(meal));\n    \n    // Save the updated meal list back to localStorage\n    localStorage.setItem('savedMeals', JSON.stringify(savedMeals));\n    \n    // Update the diet plan in the state\n    const newDietPlan = dietPlan.meals.filter(savedMeal => JSON.stringify(savedMeal) !== JSON.stringify(meal));\n    setDietPlan({ meals: newDietPlan, babyMonth: dietPlan.babyMonth, stage: dietPlan.stage });\n  };\n  \n  \n  useEffect(() => {\n    if (isRecipeTab) {\n      handleLoadSavedMeals();\n    }\n  }, [isRecipeTab]);\n\n  const handleLoadSavedMeals = () => {\n    // Load the saved meals from localStorage\n    let savedMeals = localStorage.getItem('savedMeals');\n    savedMeals = savedMeals ? JSON.parse(savedMeals) : [];\n    setDietPlan({ meals: savedMeals, babyMonth: null, stage: '저장된 ' });\n    setIsRecipeTab(true); // 수정: isRecipeTab 상태를 true로 변경\n  };\n  \n  const handleFormSubmit = (menuCount, selectedMenuCount, selectedCategories, selectedIngredients, babyMonth, stage) => {\n    const result = generateMealPlan(menuCount, selectedMenuCount, selectedCategories, babyMonth, selectedIngredients, ingredients);\n  \n    if (result.error) {\n      alert(result.error);\n      setDietPlan({ meals: [], babyMonth, stage });\n    } else {\n      setDietPlan({ meals: result, babyMonth, stage });\n    }\n  \n    // 마지막으로 선택한 입력 값을 저장합니다.\n    setLastInputValues({ menuCount, selectedMenuCount, selectedCategories, selectedIngredients, babyMonth, stage });\n  };\n  const [lastInputValues, setLastInputValues] = useState(null);\n  const handleRegeneratePlan = () => {\n    if (isRecipeTab) {\n      // If the user is in the recipe tab, reset to the initial form\n      setDietPlan(null);\n      setIsRecipeTab(false);\n      setLastInputValues(null);\n    } else if (lastInputValues) {\n      const { menuCount, selectedMenuCount, selectedCategories, babyMonth, stage } = lastInputValues;\n\n      // 선택된 식재료의 복사본을 생성합니다.\n      const selectedIngredientsCopy = JSON.parse(JSON.stringify(lastInputValues.selectedIngredients));\n  \n      const plan = generateMealPlan(menuCount, selectedMenuCount, selectedCategories, babyMonth, selectedIngredientsCopy, ingredients);\n  \n      // Check if the plan generation was successful\n      if (plan.error) {\n        alert(plan.error);\n      } else {\n        setDietPlan({ meals: plan, babyMonth, stage });\n      }\n    } else {\n      alert('이전에 선택된 값이 없어 식단표를 다시 생성할 수 없습니다.');\n    }\n  };\n  \n  return (\n    <Container className=\"App\">\n      {!dietPlan && (\n        <Row xxl className=\"container-fluid\" >\n          <Col xxl>\n            <FoodSelectionForm onFormSubmit={handleFormSubmit} />\n          </Col>\n        </Row>\n      )}\n      {dietPlan && (\n        <div className=\"flex-grow-1 padded-top\">\n          <Row className=\"justify-content-md-center\">\n            <Col xxl={1}>\n            <MealPlan\n              mealPlan={dietPlan.meals}\n              babyMonth={dietPlan.babyMonth}\n              stage={dietPlan.stage}\n              onRegeneratePlan={handleRegeneratePlan}\n              onMealSave={handleMealSave}\n              onMealDelete={handleMealDelete}\n              isRecipeTab={isRecipeTab} // 수정: isRecipeTab 상태를 MealPlan 컴포넌트에 전달\n            />\n            </Col>\n          </Row>\n        </div>\n      )}\n      <BottomNavbar className=\"fixed-bottom-navbar\" onRecipeClick={handleLoadSavedMeals} />\n    </Container>\n  );\n};\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}