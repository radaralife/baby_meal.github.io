{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["BottomNavbar","_ref","onRecipeClick","React","createElement","Navbar","fixed","bg","className","style","paddingTop","paddingBottom","borderTopLeftRadius","borderTopRightRadius","Nav","Link","color","href","onClick","event","preventDefault","MealPlan","_ref2","mealPlan","babyMonth","stage","onRegeneratePlan","onMealSave","onMealDelete","isRecipeTab","marginTop","concat","Row","xs","md","map","meal","index","badCombinationWarning","ingredients","item","ingredient","i","length","badCombinationMeat","badCombination","find","includes","checkBadCombination","allergenWarning","allergens","allergenVeggies","filter","allergenList","join","particle","word","lastChar","charAt","getSubjectParticle","checkAllergen","Col","Card","Body","Title","slice","BsSave","marginLeft","BsFillTrash3Fill","Text","undefined","category","Alert","variant","marginBottom","Button","window","location","reload","generateMealPlan","menuCount","selectedMenuCount","selectedCategories","allCategories","Object","keys","_loop","selectedIngredients","forEach","categoryItems","month","randomIndex","Math","floor","random","push","randomCategory","randomIngredient","FoodSelectionForm","_ref3","onFormSubmit","_useState","useState","_useState2","_slicedToArray","step","setStep","_useState3","_useState4","setBabyMonth","_useState5","_useState6","setMenuCount","_useState7","_useState8","setSelectedMenuCount","_useState9","_useState10","setSelectedCategories","_useState11","setSelectedIngredients","Form","onSubmit","determineStage","Group","controlId","Label","Slider","axis","x","xmin","xmax","onChange","_ref4","display","flexDirection","alignItems","justifyContent","flexWrap","maxWidth","width","margin","Check","type","label","value","fontSize","transform","e","target","prevCategories","_toConsumableArray","prevIngredients","_ref5","_ref6","Stack","gap","App","_useState13","_useState14","setIsRecipeTab","_useState15","_useState16","dietPlan","setDietPlan","useEffect","handleLoadSavedMeals","savedMeals","localStorage","getItem","JSON","parse","meals","_useState17","_useState18","lastInputValues","setLastInputValues","Container","lg","plan","setItem","stringify","newDietPlan","savedMeal","reportWebVitals","onPerfEntry","Function","__webpack_require__","then","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.69e02531.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Container, Row, Col, Button, Form } from 'react-bootstrap';\nimport Slider from 'react-input-slider';\n\nimport { Card, Stack } from 'react-bootstrap';\nimport { Alert } from 'react-bootstrap';\nimport { Navbar, Nav } from 'react-bootstrap';\nimport { BsFillTrash3Fill, BsSave } from \"react-icons/bs\";\n\nimport badCombinationMeat from './badCombinationMeat.json';\nimport allergenVeggies from './allergenVeggies.json';\nimport ingredients from './ingredients.json';\n\nconst BottomNavbar = ({ onRecipeClick }) => {\n  return (\n\n    <Navbar fixed=\"bottom\" bg=\"primary\" className=\"justify-content-around\" style={{ paddingTop: '20px', paddingBottom: '50px', borderTopLeftRadius: '20px', borderTopRightRadius: '20px' }}>\n      <Nav.Link style={{color:'white'}} href=\"#recipe\" onClick={(event) => {event.preventDefault(); onRecipeClick();}}>저장된 레시피</Nav.Link>\n      <Nav.Link style={{color:'white'}} href=\"#ranking\">랭킹 (기능 준비중)</Nav.Link>\n    </Navbar>\n\n  );\n};\n\nconst MealPlan = ({ mealPlan, babyMonth, stage, onRegeneratePlan, onMealSave, onMealDelete, isRecipeTab }) => {\n  const getSubjectParticle = (word) => {\n    const lastChar = word.charAt(word.length - 1);\n    // If the last character is a vowel, return '은'; otherwise, return '는'\n    return ['가', '나', '다', '라', '대', '린','림', '마', '망', '바', '사', '아', '차', '콩', '타', '파', '하'].includes(lastChar) ? '은' : '는';\n  };\n    \n  const checkBadCombination = (meal) => {\n    const ingredients = meal.map(item => item.ingredient);\n    for (let i = 0; i < ingredients.length; i++) {\n      if (badCombinationMeat[ingredients[i]]) {\n        const badCombination = badCombinationMeat[ingredients[i]].find(ingredient => ingredients.includes(ingredient));\n        if (badCombination) {\n          return `주의: ${ingredients[i]}와 ${badCombination}은 좋지 않은 궁합입니다.`;\n        }\n      }\n    }\n    return null;\n  };\n\n  const checkAllergen = (meal) => {\n    const ingredients = meal.map(item => item.ingredient);\n    const allergens = allergenVeggies.filter(ingredient => ingredients.includes(ingredient));\n    if (allergens.length > 0) {\n      const allergenList = allergens.join(', ');\n      const particle = getSubjectParticle(allergenList);\n      return `주의: ${allergenList}${particle} 알레르기를 유발할 수 있습니다.`;\n    }\n    return null;\n  };\n  \n  \n  return (\n    <div>\n      <h2 className=\"text-center\" style={{ marginTop: '50px' }}>\n        {babyMonth ? `${babyMonth}개월 아기, ` : ''}{stage} 식단표\n        </h2>\n      <Row xs={1} md={2} className=\"g-4\" style={{ marginTop: '10px' }}>\n        {mealPlan.map((meal, index) => {\n          const badCombinationWarning = checkBadCombination(meal);\n          const allergenWarning = checkAllergen(meal);\n          return (\n            <Col>\n              <Card>\n                <Card.Body>\n                  <Card.Title>메뉴 {index + 1}: {meal.slice(0, 2).map(item => item.ingredient).join(' ') } \n                  \n                  {!isRecipeTab && <BsSave style={{ marginLeft: '10px'}} onClick={() => onMealSave(meal)} />}\n                  {!isRecipeTab && <BsFillTrash3Fill onClick={() => onMealDelete(meal)} style={{ marginLeft: '30px', color: 'red'}}/>}\n                  {isRecipeTab  && <BsFillTrash3Fill onClick={() => onMealDelete(meal)} style={{ marginLeft: '30px', color: 'red'}}/>}\n                  </Card.Title>\n                  <Card.Text>\n                  식재료: {meal.filter(item => item.ingredient !== undefined).map(item => `${item.ingredient} (${item.category})`).join(', ')}\n                  </Card.Text>\n                  {badCombinationWarning && <Alert variant=\"warning\">{badCombinationWarning}</Alert>}\n                  {allergenWarning && <Alert variant=\"danger\">{allergenWarning}</Alert>}\n                </Card.Body>\n              </Card>\n            </Col>\n          );\n        })}\n      </Row>\n      <Row className=\"text-center\">\n      {!isRecipeTab ? (\n        <div className=\"d-flex justify-content-center mt-3\" style={{ marginBottom: '70px' }}>\n          <Col>\n            <Button className=\"floating\" variant=\"success\" onClick={onRegeneratePlan}>\n              식단표 다시 생성\n            </Button>\n          </Col>\n          <Col>\n            <Button variant=\"primary\" style={{ marginBottom: '70px' }} onClick={() => window.location.reload()}>\n              처음으로\n            </Button>\n          </Col>\n        </div>\n      ) : (\n        <div className=\"d-flex justify-content-center mt-3\" style={{ marginBottom: '120px' }}>\n          <Col>\n            <Button variant=\"primary\" onClick={onRegeneratePlan} style={{ marginBottom: '30px' }}>\n              메뉴 생성하기\n            </Button>\n          </Col>\n        </div>\n      )}\n      </Row>\n    </div>\n  );\n};\n\nconst generateMealPlan = (menuCount, selectedMenuCount, selectedCategories, babyMonth) => {\n  let mealPlan = [];\n  const allCategories = Object.keys(ingredients);\n\n  for (let i = 0; i < menuCount; i++) {\n    const meal = [];\n    const selectedIngredients = [];\n\n    selectedCategories.forEach((category) => {\n      // Collect all ingredients for the category up to the selected babyMonth\n      let categoryItems = [];\n      for (let month = 4; month <= babyMonth; month++) {\n        categoryItems = categoryItems.concat(ingredients[category][month] || []);\n      }\n    \n      // If the category has no items, skip this category\n      if (categoryItems.length === 0) {\n        return;\n      }\n\n      let randomIndex = Math.floor(Math.random() * categoryItems.length);\n\n      while (selectedIngredients.includes(categoryItems[randomIndex])) {\n        randomIndex = Math.floor(Math.random() * categoryItems.length);\n      }\n\n      selectedIngredients.push(categoryItems[randomIndex]);\n      // Save the ingredient together with its category\n      meal.push({ ingredient: categoryItems[randomIndex], category });\n    });\n\n    // If the meal is still less than the selected menu count, fill with random ingredients\n    while (meal.length < selectedMenuCount) {\n      const randomCategory = allCategories[Math.floor(Math.random() * allCategories.length)];\n\n      // Collect all ingredients for the category up to the selected babyMonth\n      let categoryItems = [];\n      for (let month = 4; month <= babyMonth; month++) {\n        categoryItems = categoryItems.concat(ingredients[randomCategory][month] || []);\n      }\n\n      const randomIngredient = categoryItems[Math.floor(Math.random() * categoryItems.length)];\n\n      if (!selectedIngredients.includes(randomIngredient)) {\n        selectedIngredients.push(randomIngredient);\n        // Save the ingredient together with its category\n        meal.push({ ingredient: randomIngredient, category: randomCategory });\n      }\n    }\n\n    mealPlan.push(meal);\n  }\n\n  return mealPlan;\n};\n\n\nconst FoodSelectionForm = ({ onFormSubmit }) => {\n  const [step, setStep] = useState(1);\n  const [babyMonth, setBabyMonth] = useState(8);\n  const [menuCount, setMenuCount] = useState(4);\n  const [selectedMenuCount, setSelectedMenuCount] = useState(3);\n  const [selectedCategories, setSelectedCategories] = useState([]);\n  const [setSelectedIngredients] = useState([]);\n\n  // Add a function to determine the stage based on the baby's month\n  const determineStage = (babyMonth) => {\n    if (babyMonth <= 6) {\n      return \"초기\";\n    } else if (babyMonth <= 9) {\n      return \"중기\";\n    } else if (babyMonth <= 12) {\n      return \"후기\";\n    } else {\n      return \"완료기\";\n    }\n  };\n\n  const handleFormSubmit = (event) => {\n    event.preventDefault();\n    \n    // If no categories are selected in step 2, skip to step 4\n    if (step === 2 && selectedCategories.length === 0) {\n      setStep(4);\n    } else if (step === 5) {\n      const stage = determineStage(babyMonth); // Determine the stage based on the baby's month\n      onFormSubmit(menuCount, selectedMenuCount, selectedCategories, babyMonth, stage);\n    } else {\n      setStep(step + 1);\n    }\n  };\n  \n  return (\n    <Form className=\"form-input\" onSubmit={handleFormSubmit} style={{ marginTop: '50px' }}>\n      {step === 1 && (\n        <Form.Group className=\"mb-3\" controlId=\"formBabyMonth\">\n          <h2><Form.Label>아기의 나이를 선택하세요</Form.Label></h2>\n          <Slider\n            axis=\"x\"\n            x={babyMonth}\n            xmin={4}\n            xmax={12}\n            onChange={({ x }) => setBabyMonth(x)}\n          />\n          <div>선택된 개월 수: {babyMonth}</div>\n        </Form.Group>\n      )}\n      {step === 2 && (\n        <Form.Group className=\"mb-3\" controlId=\"formSelectedCategories\">\n          <h2><Form.Label>식재료 종류를 선택하세요</Form.Label></h2>\n          <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'center', justifyContent: 'center' }}>\n            <div style={{ display: 'flex', flexWrap: 'wrap', justifyContent: 'center', maxWidth: '600px' }}>\n              {Object.keys(ingredients).map((category) => {\n                let categoryItems = [];\n                for (let month = 4; month <= babyMonth; month++) {\n                  if (ingredients[category][month]) {\n                    categoryItems = categoryItems.concat(ingredients[category][month]);\n                  }\n                }\n                if (categoryItems.length > 0) {\n                  return (\n                    <div style={{ width: '40%', margin: '5px 0' }}>\n                      <Form.Check className=\"checkbox-large\"\n                        type=\"checkbox\"\n                        label={category}\n                        value={category}\n                        style={{ fontSize: '12px', transform: 'scale(1.5)' }}\n                        onChange={(e) => {\n                          const value = e.target.value;\n                          setSelectedCategories((prevCategories) =>\n                            prevCategories.includes(value)\n                              ? prevCategories.filter((category) => category !== value)\n                              : [...prevCategories, value]\n                            );\n                          }}\n                      />\n                    </div>\n                  );\n                } else {\n                  return null;\n                }\n              })}\n            </div>\n          </div>\n        </Form.Group>\n      )}\n      {step === 3 && (\n        <Form.Group className=\"mb-3\" controlId=\"formSelectedIngredients\">\n          <h2><Form.Label>식재료를 선택하세요</Form.Label></h2>\n          <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'center', justifyContent: 'center' }}>\n            <div style={{ display: 'flex', flexWrap: 'wrap', justifyContent: 'center', maxWidth: '600px' }}>\n              {selectedCategories.map((category) => {\n                let categoryItems = [];\n                for (let month = 4; month <= babyMonth; month++) {\n                  if (ingredients[category][month]) {\n                    categoryItems = categoryItems.concat(ingredients[category][month]);\n                  }\n                }\n                return categoryItems.map((item) => (\n                  <div style={{ width: '40%', margin: '5px 0' }}>\n                    <Form.Check className=\"checkbox-large\"\n                      type=\"checkbox\"\n                      label={item}\n                      value={item}\n                      style={{ fontSize: '12px', transform: 'scale(1.5)' }}\n                      onChange={(e) => {\n                        const value = e.target.value;\n                        setSelectedIngredients((prevIngredients) =>\n                          prevIngredients.includes(value)\n                            ? prevIngredients.filter((item) => item !== value)\n                            : [...prevIngredients, value]\n                        );\n                      }}\n                    />\n                  </div>\n                ));\n              })}\n            </div>\n          </div>\n        </Form.Group>\n      )}\n      {step === 4 && (\n        <Form.Group className=\"mb-3\" controlId=\"formSelectedMenuCount\">\n          <h2><Form.Label>식재료의 개수를 선택하세요</Form.Label></h2>\n          <Slider\n            axis=\"x\"\n            x={selectedMenuCount}\n            xmin={1}\n            xmax={5}\n            onChange={({ x }) => setSelectedMenuCount(x)}\n          />\n          <div>선택된 조합 식재료 종류: {selectedMenuCount}</div>\n        </Form.Group>\n      )}\n\n      {step === 5 && (        \n        <Form.Group className=\"mb-3\" controlId=\"formMenuCount\">\n          <h2><Form.Label>생성할 메뉴 개수를 선택하세요</Form.Label></h2>\n          <Slider\n            axis=\"x\"\n            x={menuCount}\n            xmin={1}\n            xmax={7}\n            onChange={({ x }) => setMenuCount(x)}\n          />\n          <div>선택된 메뉴 개수: {menuCount}</div>\n        </Form.Group>\n      )}\n      <Stack gap={5}>\n          <Button variant=\"primary\" type=\"submit\">\n            {step === 5 ? '식단표 생성하기' : '다음'}\n          </Button>\n        <h3 className=\"text-center\" style={{ marginBottom: '90px' }}>{step} / 5</h3>\n      </Stack>\n    </Form>\n  );\n};\n\nconst App = () => {\n  const [isRecipeTab, setIsRecipeTab] = useState(false);\n  const [dietPlan, setDietPlan] = useState(null);\n  const handleMealSave = (meal) => {\n    // Save the meal to localStorage\n    let savedMeals = localStorage.getItem('savedMeals');\n    savedMeals = savedMeals ? JSON.parse(savedMeals) : [];\n    savedMeals.push(meal);\n    localStorage.setItem('savedMeals', JSON.stringify(savedMeals));\n  \n    // Remove the saved meal from the diet plan\n    const newDietPlan = dietPlan.meals.filter(savedMeal => JSON.stringify(savedMeal) !== JSON.stringify(meal));\n    setDietPlan({ meals: newDietPlan, babyMonth: dietPlan.babyMonth, stage: dietPlan.stage });\n  };\n  const handleMealDelete = (meal) => {\n    // Load the saved meals from localStorage\n    let savedMeals = localStorage.getItem('savedMeals');\n    savedMeals = savedMeals ? JSON.parse(savedMeals) : [];\n    \n    // Filter out the selected meal\n    savedMeals = savedMeals.filter(savedMeal => JSON.stringify(savedMeal) !== JSON.stringify(meal));\n    \n    // Save the updated meal list back to localStorage\n    localStorage.setItem('savedMeals', JSON.stringify(savedMeals));\n    \n    // Update the diet plan in the state\n    const newDietPlan = dietPlan.meals.filter(savedMeal => JSON.stringify(savedMeal) !== JSON.stringify(meal));\n    setDietPlan({ meals: newDietPlan, babyMonth: dietPlan.babyMonth, stage: dietPlan.stage });\n  };\n  \n  \n  useEffect(() => {\n    if (isRecipeTab) {\n      handleLoadSavedMeals();\n    }\n  }, [isRecipeTab]);\n\n  const handleLoadSavedMeals = () => {\n    // Load the saved meals from localStorage\n    let savedMeals = localStorage.getItem('savedMeals');\n    savedMeals = savedMeals ? JSON.parse(savedMeals) : [];\n    setDietPlan({ meals: savedMeals, babyMonth: null, stage: '저장된 ' });\n    setIsRecipeTab(true); // 수정: isRecipeTab 상태를 true로 변경\n  };\n  \n  \n  const handleFormSubmit = (menuCount, selectedMenuCount, selectedCategories, babyMonth, stage) => {\n    const plan = generateMealPlan(menuCount, selectedMenuCount, selectedCategories, babyMonth);\n    setDietPlan({ meals: plan, babyMonth, stage }); // Pass babyMonth and stage along with the meal plan\n  \n    // Save the diet plan to localStorage\n    localStorage.setItem('dietPlan', JSON.stringify({ meals: plan, babyMonth, stage }));\n  \n    // Save the input values\n    setLastInputValues({ menuCount, selectedMenuCount, selectedCategories, babyMonth, stage });\n  };\n  const [lastInputValues, setLastInputValues] = useState(null);\n  const handleRegeneratePlan = () => {\n    if (isRecipeTab) {\n      // If the user is in the recipe tab, reset to the initial form\n      setDietPlan(null);\n      setIsRecipeTab(false);\n      setLastInputValues(null);\n    } else if (lastInputValues) {\n      // If the user is in the menu result page and there are last input values, regenerate the plan based on them\n      const { menuCount, selectedMenuCount, selectedCategories, babyMonth, stage } = lastInputValues;\n      const plan = generateMealPlan(menuCount, selectedMenuCount, selectedCategories, babyMonth);\n      setDietPlan({ meals: plan, babyMonth, stage });\n    } else {\n      // If the user is in the menu result page and there are no last input values, reset to the initial form\n      setDietPlan(null);\n      setIsRecipeTab(false);\n    }\n  };\n  \n  return (\n    <Container className=\"App\">\n      {!dietPlan && (\n        <Row className=\"justify-content-md-center\">\n          <Col xs lg=\"6\">\n            <FoodSelectionForm onFormSubmit={handleFormSubmit} />\n          </Col>\n        </Row>\n      )}\n      {dietPlan && (\n        <div className=\"flex-grow-1 padded-top\">\n          <Row className=\"justify-content-md-center\">\n            <Col xs lg=\"6\">\n            <MealPlan\n              mealPlan={dietPlan.meals}\n              babyMonth={dietPlan.babyMonth}\n              stage={dietPlan.stage}\n              onRegeneratePlan={handleRegeneratePlan}\n              onMealSave={handleMealSave}\n              onMealDelete={handleMealDelete}\n              isRecipeTab={isRecipeTab} // 수정: isRecipeTab 상태를 MealPlan 컴포넌트에 전달\n            />\n            </Col>\n          </Row>\n        </div>\n      )}\n      <BottomNavbar className=\"fixed-bottom-navbar\" onRecipeClick={handleLoadSavedMeals} />\n    </Container>\n  );\n};\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}