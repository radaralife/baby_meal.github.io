{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["Ranking","_ref","rankingData","_useState","useState","Array","length","fill","_useState2","_slicedToArray","expanded","setExpanded","React","createElement","className","style","paddingInlineStart","listStyleType","map","item","index","key","rank","display","alignItems","padding","margin","borderRadius","backgroundColor","border","fontWeight","fontSize","width","textAlign","flexDirection","justifyContent","overflow","whiteSpace","textOverflow","maxWidth","menu","onClick","newExpanded","_toConsumableArray","toggleExpand","cursor","textDecoration","color","marginLeft","BottomNavbar","_ref2","onRecipeClick","onRankingClick","Navbar","fixed","bg","paddingTop","paddingBottom","borderTopLeftRadius","borderTopRightRadius","Nav","Link","href","event","preventDefault","MealPlan","_ref3","mealPlan","babyMonth","stage","onRegeneratePlan","onMealSave","onMealDelete","isRecipeTab","isArray","marginTop","concat","Row","xs","md","meal","badCombinationWarning","ingredients","ingredient","i","badCombinationMeat","badCombination","find","includes","checkBadCombination","allergenWarning","allergens","allergenVeggies","filter","allergenList","join","checkAllergen","Col","Card","Body","Title","BsSave","BsFillTrash3Fill","Text","undefined","category","Alert","variant","marginBottom","Button","window","location","reload","generateMeal","selectedCategories","selectedIngredients","selectedMenuCount","Math","floor","random","ingredientIndex","splice","push","generateMealPlan","menuCount","JSON","parse","stringify","error","FoodSelectionForm","_ref4","onFormSubmit","_useState3","_useState4","step","setStep","_useState5","_useState6","setBabyMonth","_useState7","_useState8","setMenuCount","_useState9","_useState10","setSelectedMenuCount","_useState11","_useState12","setSelectedCategories","_useState13","_useState14","setSelectedIngredients","_useState15","_useState16","tip","setTip","useEffect","randomIndex","babyTips","Form","onSubmit","currentCategory","alert","Object","values","reduce","total","arr","totalSelectedIngredients","requiredIngredients","result","determineStage","Group","controlId","Label","Slider","axis","x","xmin","xmax","onChange","_ref5","styles","track","height","active","keys","categoryItems","month","Check","type","id","label","value","checked","e","target","prevCategories","allSelected","isChecked","allItems","prevIngredients","_objectSpread","_defineProperty","flexWrap","handleIngredientSelection","max","_ref6","_ref7","Stack","gap","App","_useState17","_useState18","setIsRecipeTab","_useState19","_useState20","dietPlan","setDietPlan","_useState21","_useState22","showRanking","setShowRanking","handleLoadSavedMeals","savedMeals","localStorage","getItem","meals","_useState23","_useState24","lastInputValues","setLastInputValues","Container","xxl","selectedIngredientsCopy","plan","setItem","newDietPlan","savedMeal","reportWebVitals","onPerfEntry","Function","__webpack_require__","then","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"89bAcMA,EAAU,SAAHC,GAAwB,IAAlBC,EAAWD,EAAXC,YAAWC,EACIC,mBAASC,MAAMH,EAAYI,QAAQC,MAAK,IAAOC,EAAAC,YAAAN,EAAA,GAAxEO,EAAQF,EAAA,GAAEG,EAAWH,EAAA,GAQ5B,OACEI,IAAAC,cAAA,OAAKC,UAAU,qBACbF,IAAAC,cAAA,MAAIC,UAAU,eAAc,+CAC5BF,IAAAC,cAAA,MAAIE,MAAO,CAAEC,mBAAoB,MAAOC,cAAe,SACpDf,EAAYgB,IAAI,SAACC,EAAMC,GAAK,OAC3BR,IAAAC,cAAA,MAAIQ,IAAKF,EAAKG,KAAMP,MAAO,CACzBQ,QAAS,OACTC,WAAY,SACZC,QAAS,YACTC,OAAQ,OACRC,aAAc,OACdC,gBAAiBR,EAAQ,IAAM,EAAI,UAAY,UAC/CS,OAAQ,sBAERjB,IAAAC,cAAA,QAAME,MAAO,CACXe,WAAY,OACZC,SAAU,OACVC,MAAO,OACPC,UAAW,WACTd,EAAKG,KAAK,UACdV,IAAAC,cAAA,OAAKE,MAAO,CACVQ,QAAS,OACTW,cAAe,MACfV,WAAY,SACZW,eAAgB,gBAChBH,MAAO,oBACPI,SAAU,WAEVxB,IAAAC,cAAA,QAAME,MAAO,CACXgB,SAAU,OACVM,WAAY3B,EAASU,GAAS,SAAW,SACzCgB,SAAU,SACVE,aAAc,WACdC,SAAU,QACRpB,EAAKqB,MACRrB,EAAKqB,KAAKlC,OAAS,IAClBM,IAAAC,cAAA,QACE4B,QAAS,kBA3CJ,SAACrB,GACpB,IAAMsB,EAAWC,YAAOjC,GACxBgC,EAAYtB,IAAUsB,EAAYtB,GAClCT,EAAY+B,GAwCiBE,CAAaxB,IAC5BL,MAAO,CACL8B,OAAQ,UACRC,eAAgB,YAChBC,MAAO,UACPhB,SAAU,OACViB,WAAY,SAGbtC,EAASU,GAAS,eAAO,8BAWtC6B,EAAe,SAAHC,GAA0C,IAApCC,EAAaD,EAAbC,cAAeC,EAAcF,EAAdE,eACrC,OACExC,IAAAC,cAACwC,IAAM,CAACC,MAAM,SAASC,GAAG,UAAUzC,UAAU,yBAAyBC,MAAO,CAAEyC,WAAY,OAAQC,cAAe,OAAQC,oBAAqB,OAAQC,qBAAsB,SAC5K/C,IAAAC,cAAC+C,IAAIC,KAAI,CAAC9C,MAAO,CAACgC,MAAM,SAAUe,KAAK,UAAUrB,QAAS,SAACsB,GAAWA,EAAMC,iBAAkBb,MAAmB,yCACjHvC,IAAAC,cAAC+C,IAAIC,KAAI,CAAC9C,MAAO,CAACgC,MAAM,SAAUe,KAAK,WAAWrB,QAAS,SAACsB,GAAWA,EAAMC,iBAAkBZ,MAAoB,iDAKnHa,EAAW,SAAHC,GAAgG,IAA1FC,EAAQD,EAARC,SAAUC,EAASF,EAATE,UAAWC,EAAKH,EAALG,MAAOC,EAAgBJ,EAAhBI,iBAAkBC,EAAUL,EAAVK,WAAYC,EAAYN,EAAZM,aAAcC,EAAWP,EAAXO,YA0BxF,OAAKpE,MAAMqE,QAAQP,GAKnBvD,IAAAC,cAAA,WACED,IAAAC,cAAA,MAAIC,UAAU,cAAcC,MAAO,CAAE4D,UAAW,SAC7CP,EAAS,GAAAQ,OAAMR,EAAS,+BAAY,GAAIC,EAAM,uBAEjDzD,IAAAC,cAACgE,IAAG,CAACC,GAAI,EAAGC,GAAI,EAAGjE,UAAU,MAAMC,MAAO,CAAE4D,UAAW,SACpDR,EAASjD,IAAI,SAAC8D,EAAM5D,GACnB,IAAM6D,EApCc,SAACD,GAE3B,IADA,IAAME,EAAcF,EAAK9D,IAAI,SAAAC,GAAI,OAAIA,EAAKgE,aACjCC,EAAI,EAAGA,EAAIF,EAAY5E,OAAQ8E,IACtC,GAAIC,EAAmBH,EAAYE,IAAK,CACtC,IAAME,EAAiBD,EAAmBH,EAAYE,IAAIG,KAAK,SAAAJ,GAAU,OAAID,EAAYM,SAASL,KAClG,GAAIG,EACF,iDAAAV,OAAoBM,EAAYE,GAAE,MAAAR,OAAKU,GAK7C,OAAO,KAyB6BG,CAAoBT,GAC5CU,EAvBQ,SAACV,GACrB,IAAME,EAAcF,EAAK9D,IAAI,SAAAC,GAAI,OAAIA,EAAKgE,aACpCQ,EAAYC,EAAgBC,OAAO,SAAAV,GAAU,OAAID,EAAYM,SAASL,KAC5E,GAAIQ,EAAUrF,OAAS,EAAG,CACxB,IAAMwF,EAAeH,EAAUI,KAAK,MACpC,gDAAAnB,OAAmBkB,GAErB,OAAO,KAgBuBE,CAAchB,GACtC,OACEpE,IAAAC,cAACoF,IAAG,KACFrF,IAAAC,cAACqF,IAAI,KACHtF,IAAAC,cAACqF,IAAKC,KAAI,KACRvF,IAAAC,cAACqF,IAAKE,MAAK,KAAC,gBAAIhF,EAAQ,GACtBqD,GAAe7D,IAAAC,cAACwF,IAAM,CAACtF,MAAO,CAAEiC,WAAY,QAASP,QAAS,kBAAM8B,EAAWS,OAC/EP,GAAe7D,IAAAC,cAACyF,IAAgB,CAAC7D,QAAS,kBAAM+B,EAAaQ,IAAOjE,MAAO,CAAEiC,WAAY,OAAQD,MAAO,SACzG0B,GAAgB7D,IAAAC,cAACyF,IAAgB,CAAC7D,QAAS,kBAAM+B,EAAaQ,IAAOjE,MAAO,CAAEiC,WAAY,OAAQD,MAAO,UAE1GnC,IAAAC,cAACqF,IAAKK,KAAI,KAAC,uBACLvB,EAAKa,OAAO,SAAA1E,GAAI,YAAwBqF,IAApBrF,EAAKgE,aAA0BjE,IAAI,SAAAC,GAAI,SAAAyD,OAAOzD,EAAKgE,WAAU,MAAAP,OAAKzD,EAAKsF,SAAQ,OAAKV,KAAK,OAElHd,GAAyBrE,IAAAC,cAAC6F,IAAK,CAACC,QAAQ,WAAW1B,GACnDS,GAAmB9E,IAAAC,cAAC6F,IAAK,CAACC,QAAQ,UAAUjB,SAOzD9E,IAAAC,cAACgE,IAAG,CAAC/D,UAAU,eACb2D,EAcA7D,IAAAC,cAAA,OAAKE,MAAO,CAAE6F,aAAc,UAC1BhG,IAAAC,cAACoF,IAAG,KACFrF,IAAAC,cAACgG,IAAM,CAACF,QAAQ,UAAU5F,MAAO,CAAE6F,aAAc,SAAWnE,QAAS,kBAAMqE,OAAOC,SAASC,WAAU,2CAfzGpG,IAAAC,cAAA,OAAKC,UAAU,qCAAqCC,MAAO,CAAE6F,aAAc,SACzEhG,IAAAC,cAACoF,IAAG,KACFrF,IAAAC,cAACgG,IAAM,CAACF,QAAQ,UAAUlE,QAAS6B,GAAkB,8BAIvD1D,IAAAC,cAACoF,IAAG,KACFrF,IAAAC,cAACgG,IAAM,CAACF,QAAQ,UAAU5F,MAAO,CAAE6F,aAAc,QAAUnE,QAAS,kBAAMqE,OAAOC,SAASC,WAAU,gCAzCnGpG,IAAAC,cAAA,WAAK,sCA2DZoG,EAAe,SAACC,EAAoB9C,EAAW+C,EAAqBC,GAIxE,IAHA,IAAMpC,EAAO,GAGNA,EAAK1E,OAAS8G,GAAmB,CACtC,IACMX,EAAWS,EADKG,KAAKC,MAAMD,KAAKE,SAAWL,EAAmB5G,SAGpE,KAAI6G,EAAoBV,IAAaU,EAAoBV,GAAUnG,OAAS,GAU1E,OAAO,KATP,IAAMkH,EAAkBH,KAAKC,MAAMD,KAAKE,SAAWJ,EAAoBV,GAAUnG,QAC3E6E,EAAagC,EAAoBV,GAAUe,GAGjDL,EAAoBV,GAAUgB,OAAOD,EAAiB,GAEtDxC,EAAK0C,KAAK,CAAEvC,aAAYsB,aAO5B,OAAOzB,GAGH2C,EAAmB,SAACC,EAAWR,EAAmBF,EAAoB9C,EAAW+C,EAAqBjC,GAI1G,IAHA,IAAMf,EAAW,GAGRiB,EAAI,EAAGA,EAAIwC,EAAWxC,IAAK,CAClC,IAAMJ,EAAOiC,EAAaC,EAAoB9C,EAAWyD,KAAKC,MAAMD,KAAKE,UAAUZ,IAAuBC,GAC1G,IAAKpC,EACH,MAAO,CAAEgD,MAAK,sFAAApD,OAAuBwC,EAAiB,uFAExDjD,EAASuD,KAAK1C,GAGhB,OAAOb,GAMH8D,EAAoB,SAAHC,GAAyB,IAAnBC,EAAYD,EAAZC,aAAYC,EACfhI,mBAAS,GAAEiI,EAAA5H,YAAA2H,EAAA,GAA5BE,EAAID,EAAA,GAAEE,EAAOF,EAAA,GAAAG,EACcpI,mBAAS,GAAEqI,EAAAhI,YAAA+H,EAAA,GAAtCpE,EAASqE,EAAA,GAAEC,EAAYD,EAAA,GAAAE,EACIvI,mBAAS,GAAEwI,EAAAnI,YAAAkI,EAAA,GAAtCf,EAASgB,EAAA,GAAEC,EAAYD,EAAA,GAAAE,EACoB1I,mBAAS,GAAE2I,EAAAtI,YAAAqI,EAAA,GAAtD1B,EAAiB2B,EAAA,GAAEC,EAAoBD,EAAA,GAAAE,EACM7I,mBAAS,IAAG8I,EAAAzI,YAAAwI,EAAA,GAAzD/B,EAAkBgC,EAAA,GAAEC,EAAqBD,EAAA,GAAAE,EACMhJ,mBAAS,IAAGiJ,EAAA5I,YAAA2I,EAAA,GAA3DjC,EAAmBkC,EAAA,GAAEC,EAAsBD,EAAA,GAkGhDE,EAEoBnJ,mBAAS,IAAGoJ,EAAA/I,YAAA8I,EAAA,GAA3BE,EAAGD,EAAA,GAAEE,EAAMF,EAAA,GAQlB,OANAG,oBAAU,WACR,IAAMC,EAAcvC,KAAKC,MAAMD,KAAKE,SAAWsC,EAASvJ,QACxDoJ,EAAOG,EAASD,KACf,CAACtB,IAIF1H,IAAAC,cAACiJ,IAAI,CAAChJ,UAAU,eAAeiJ,SA9FR,SAAChG,GAIxB,GAHAA,EAAMC,iBAGO,IAATsE,GAA4C,IAA9BpB,EAAmB5G,OAArC,CAKA,GAAIgI,GAAQ,GAAKA,EAAOpB,EAAmB5G,OAAS,EAAG,CACrD,IAAM0J,EAAkB9C,EAAmBoB,EAAO,GAClD,IAAKnB,EAAoB6C,IAAoE,IAAhD7C,EAAoB6C,GAAiB1J,OAEhF,YADA2J,MAAK,IAAArF,OAAKoF,EAAe,kJAI7B,GAAI1B,IAASpB,EAAmB5G,OAAS,EAAG,CAK1C,GAHiC4J,OAAOC,OAAOhD,GAAqBiD,OAAO,SAACC,EAAOC,GAAG,OAAKD,EAAQC,EAAIhK,QAAQ,GAGhF,EAE7B,YADA2J,MAAM,6FAGR1B,EAAQD,EAAO,QACV,GAAIA,IAASpB,EAAmB5G,OAAS,EAAG,CAEjD,IAAMiK,EAA2BL,OAAOC,OAAOhD,GAAqBiD,OAAO,SAACC,EAAOC,GAAG,OAAKD,EAAQC,EAAIhK,QAAQ,GACzGkK,EAAsBpD,EAAoBQ,EAEhD,GAAI2C,EAA2BC,EAI7B,OAFAP,MAAK,gFAAArF,OADsB4F,EAAsBD,EACJ,EAAC,4FAC9ChC,EAAQ,GAKV,IAAMkC,EAAS9C,EAAiBC,EAAWR,EAAmBF,EAAoB9C,EAAW+C,GAC7F,GAAIsD,EAAQ,CACV,IAAMpG,EArDW,SAACD,GACtB,OAAIA,GAAa,EACR,eACEA,GAAa,EACf,eACEA,GAAa,GACf,eAEA,qBA6CSsG,CAAetG,GAC7B+D,EAAaP,EAAWR,EAAmBF,EAAoBC,EAAqB/C,EAAWC,EAAOoG,SAIxGlC,EAAQD,EAAO,QAzCf2B,MAAM,oIAyFmDlJ,MAAO,CAAE4D,UAAW,SACnE,IAAT2D,GACC1H,IAAAC,cAACiJ,IAAKa,MAAK,CAAC7J,UAAU,OAAO8J,UAAU,iBACrChK,IAAAC,cAAA,UAAID,IAAAC,cAACiJ,IAAKe,MAAK,KAAC,yEAChBjK,IAAAC,cAACiK,IAAM,CACLC,KAAK,IACLC,EAAG5G,EACH6G,KAAM,EACNC,KAAM,GACNC,SAAU,SAAAC,GAAA,IAAGJ,EAACI,EAADJ,EAAC,OAAOtC,EAAasC,IAClCK,OAAQ,CACNC,MAAO,CACLC,OAAQ,OACRvJ,MAAO,QAETwJ,OAAQ,CACND,OAAQ,OACRvJ,MAAO,WAIbpB,IAAAC,cAAA,WAAK,2CAAWuD,IAGV,IAATkE,GACC1H,IAAAC,cAACiJ,IAAKa,MAAK,CAAC7J,UAAU,OAAO8J,UAAU,0BACrChK,IAAAC,cAAA,UAAID,IAAAC,cAACiJ,IAAKe,MAAK,KAAC,yEAChBjK,IAAAC,cAAA,OAAKE,MAAO,CAAEQ,QAAS,OAAQW,cAAe,WAEzCgI,OAAOuB,KAAKvG,GAAahE,IAAI,SAACuF,GAE7B,IADA,IAAIiF,EAAgB,GACXC,EAAQ,EAAGA,GAASvH,EAAWuH,IAClCzG,EAAYuB,GAAUkF,KACxBD,EAAgBA,EAAc9G,OAAOM,EAAYuB,GAAUkF,KAG/D,OAAID,EAAcpL,OAAS,EAEvBM,IAAAC,cAAA,OAAKE,MAAO,CAAEiB,MAAO,MAAON,OAAQ,UAClCd,IAAAC,cAACiJ,IAAK8B,MAAK,CAAC9K,UAAU,OACpB+K,KAAK,WACLC,GAAIrF,EACJsF,MAAOtF,EACPuF,MAAOvF,EACPwF,QAAS/E,EAAmB1B,SAASiB,GACrC0E,SAAU,SAACe,GACT,IAAMF,EAAQE,EAAEC,OAAOH,MACvB7C,EAAsB,SAACiD,GAAc,OACnCA,EAAe5G,SAASwG,GACpBI,EAAevG,OAAO,SAACY,GAAQ,OAAKA,IAAauF,IAAM,GAAApH,OAAAjC,YACnDyJ,GAAc,CAAEJ,UAO7B,SAKhB1D,IAASpB,EAAmB5G,OAAS,GACpCM,IAAAC,cAAA,WACED,IAAAC,cAAA,UAAI,OACJD,IAAAC,cAAA,OAAKE,MAAO,CAAE6F,aAAc,SACzB6C,IAKNnB,GAAQ,GAAKA,EAAOpB,EAAmB5G,OAAS,GAC9C,WAGC,IAFA,IAAMmG,EAAWS,EAAmBoB,EAAO,GACvCoD,EAAgB,GACXC,EAAQ,EAAGA,GAASvH,EAAWuH,IAClCzG,EAAYuB,GAAUkF,KACxBD,EAAgBA,EAAc9G,OAAOM,EAAYuB,GAAUkF,KAI/D,IAUMU,EAAclF,EAAoBV,IAAaU,EAAoBV,GAAUnG,SAAWoL,EAAcpL,OAE5G,OACEM,IAAAC,cAACiJ,IAAKa,MAAK,CAAC7J,UAAU,OAAO8J,UAAS,2BAAAhG,OAA6B6B,IACjE7F,IAAAC,cAAA,UACED,IAAAC,cAACiJ,IAAKe,MAAK,KAAEpE,EAAS,mEAExB7F,IAAAC,cAAA,OAAKE,MAAO,CAAEQ,QAAS,OAAQW,cAAe,WAC5CtB,IAAAC,cAACiJ,IAAK8B,MAAK,CACTC,KAAK,WACLC,GAAE,aAAAlH,OAAe6B,GACjBsF,MAAOnL,IAAAC,cAAA,QAAME,MAAO,CAAEe,WAAY,SAAU,6BAC5CmK,QAASI,EACTlB,SAvBgB,SAACe,GACvB,IAAMI,EAAYJ,EAAEC,OAAOF,QACrBM,EAAWb,EACjBpC,EAAuB,SAACkD,GAAe,OAAAC,YAAA,GAClCD,EAAeE,YAAA,GACjBjG,EAAW6F,EAAYC,EAAW,UAoBjC3L,IAAAC,cAAA,OAAKE,MAAO,CAAEQ,QAAS,OAAQoL,SAAU,SACtCjB,EAAcxK,IAAI,SAACC,GAAI,OACtBP,IAAAC,cAAA,OAAKE,MAAO,CAAEiB,MAAO,MAAON,OAAQ,UAClCd,IAAAC,cAACiJ,IAAK8B,MAAK,CACT9K,UAAU,OACV+K,KAAK,WACLC,GAAI3K,EACJ4K,MAAO5K,EACP6K,MAAO7K,EACP8K,UAAS9E,EAAoBV,IAAYU,EAAoBV,GAAUjB,SAASrE,GAChFgK,SAAU,SAACe,GAAC,OA/JA,SAACzF,EAAUuF,GAC3C1C,EAAuB,SAACkD,GAEtB,OAAIA,EAAgB/F,GAEd+F,EAAgB/F,GAAUjB,SAASwG,GACrCS,YAAA,GACKD,EAAeE,YAAA,GACjBjG,EAAW+F,EAAgB/F,GAAUZ,OAAO,SAAC1E,GAAI,OAAKA,IAAS6K,MAKlES,YAAA,GACKD,EAAeE,YAAA,GACjBjG,EAAQ,GAAA7B,OAAAjC,YAAO6J,EAAgB/F,IAAS,CAAEuF,MAM/CS,YAAA,GACKD,EAAeE,YAAA,GACjBjG,EAAW,CAACuF,OAwIkBY,CAA0BnG,EAAUyF,EAAEC,OAAOH,gBA5C7E,GAsDF1D,IAASjB,KAAKwF,IAAI,EAAG3F,EAAmB5G,OAAS,IAChDM,IAAAC,cAACiJ,IAAKa,MAAK,CAAC7J,UAAU,OAAO8J,UAAU,yBACrChK,IAAAC,cAAA,UAAID,IAAAC,cAACiJ,IAAKe,MAAK,KAAC,+EAChBjK,IAAAC,cAACiK,IAAM,CACLC,KAAK,IACLC,EAAG5D,EACH6D,KAAM,EACNC,KAAM,EACNC,SAAU,SAAA2B,GAAA,IAAG9B,EAAC8B,EAAD9B,EAAC,OAAOhC,EAAqBgC,IAC1CK,OAAQ,CACNC,MAAO,CACLC,OAAQ,OACRvJ,MAAO,QAETwJ,OAAQ,CACND,OAAQ,OACRvJ,MAAO,WAIbpB,IAAAC,cAAA,WAAK,oEAAgBuG,IAGxBkB,IAASpB,EAAmB5G,OAAS,GACpCM,IAAAC,cAACiJ,IAAKa,MAAK,CAAC7J,UAAU,OAAO8J,UAAU,iBACrChK,IAAAC,cAAA,UAAID,IAAAC,cAACiJ,IAAKe,MAAK,KAAC,sFAChBjK,IAAAC,cAACiK,IAAM,CACLC,KAAK,IACLC,EAAGpD,EACHqD,KAAM,EACNC,KAAM,EACNC,SAAU,SAAA4B,GAAA,IAAG/B,EAAC+B,EAAD/B,EAAC,OAAOnC,EAAamC,IAClCK,OAAQ,CACNC,MAAO,CACLC,OAAQ,OACRvJ,MAAO,QAETwJ,OAAQ,CACND,OAAQ,OACRvJ,MAAO,WAIbpB,IAAAC,cAAA,WAAK,iDAAY+G,IAGrBhH,IAAAC,cAACmM,IAAK,CAACC,IAAK,GACZrM,IAAAC,cAAA,OAAKE,MAAO,CAAEQ,QAAS,OAAQY,eAAgB,kBAE5CmG,EAAO,GACN1H,IAAAC,cAACgG,IAAM,CAACF,QAAQ,YAAYlE,QA7LT,WACzB8F,EAAQD,EAAO,IA4LgDvH,MAAO,CAAEiB,MAAO,QAAS,gBAIpFpB,IAAAC,cAACgG,IAAM,CACLF,QAAQ,UACRkF,KAAK,SACL9K,MAAO,CACLiB,MAAgB,IAATsG,EAAa,OAAS,MAC7BtF,WAAYsF,EAAO,EAAI,OAAS,QAGjCA,IAASpB,EAAmB5G,OAAS,EAAI,8CAAa,iBAG3DM,IAAAC,cAAA,MAAIC,UAAU,cAAcC,MAAO,CAAE6F,aAAc,SAAW0B,EAAK,MAAIpB,EAAmB5G,OAAS,MAgJ1F4M,EA1IH,WAAM,IAAAC,EACsB/M,oBAAS,GAAMgN,EAAA3M,YAAA0M,EAAA,GAA9C1I,EAAW2I,EAAA,GAAEC,EAAcD,EAAA,GAAAE,EACFlN,mBAAS,MAAKmN,EAAA9M,YAAA6M,EAAA,GAAvCE,EAAQD,EAAA,GAAEE,EAAWF,EAAA,GAY1BG,EAEoCtN,oBAAS,GAAMuN,EAAAlN,YAAAiN,EAAA,GAA9CE,EAAWD,EAAA,GAAEE,EAAcF,EAAA,GAqClChE,oBAAU,WACJlF,GACFqJ,KAED,CAACrJ,IAEJ,IAAMqJ,EAAuB,WAE3B,IAAIC,EAAaC,aAAaC,QAAQ,cACtCF,EAAaA,EAAalG,KAAKC,MAAMiG,GAAc,GACnDN,EAAY,CAAES,MAAOH,EAAY3J,UAAW,KAAMC,MAAO,wBACzDgJ,GAAe,GACfQ,GAAe,IAefM,EAC4C/N,mBAAS,MAAKgO,EAAA3N,YAAA0N,EAAA,GAArDE,EAAeD,EAAA,GAAEE,EAAkBF,EAAA,GA0B1C,OACExN,IAAAC,cAAC0N,IAAS,CAACzN,UAAU,OAClB8M,EACChN,IAAAC,cAACb,EAAO,CAACE,YA3GK,CAClB,CAAEsC,KAAM,8GAA+BlB,KAAM,GAC7C,CAAEkB,KAAM,4GAA6BlB,KAAM,GAC3C,CAAEkB,KAAM,oGAA0BlB,KAAM,GACxC,CAAEkB,KAAM,oEAAmBlB,KAAM,GACjC,CAAEkB,KAAM,4FAAuBlB,KAAM,GACrC,CAAEkB,KAAM,oCAAYlB,KAAM,GAC1B,CAAEkB,KAAM,0EAAoBlB,KAAM,GAClC,CAAEkB,KAAM,wFAAwBlB,KAAM,GACtC,CAAEkB,KAAM,gFAAqBlB,KAAM,GACnC,CAAEkB,KAAM,6DAAiBlB,KAAM,OAkGxBkM,EAOH5M,IAAAC,cAAA,OAAKC,UAAU,0BACbF,IAAAC,cAACgE,IAAG,CAAC/D,UAAU,6BACbF,IAAAC,cAACoF,IAAG,CAACuI,IAAK,GACR5N,IAAAC,cAACoD,EAAQ,CACPE,SAAUqJ,EAASU,MACnB9J,UAAWoJ,EAASpJ,UACpBC,MAAOmJ,EAASnJ,MAChBC,iBA3Ce,WAC3B,GAAIG,EAEFgJ,EAAY,MACZJ,GAAe,GACfiB,EAAmB,WACd,GAAID,EAAiB,KAClBzG,EAAuEyG,EAAvEzG,UAAWR,EAA4DiH,EAA5DjH,kBAAmBF,EAAyCmH,EAAzCnH,mBAAoB9C,EAAqBiK,EAArBjK,UAAWC,EAAUgK,EAAVhK,MAG/DoK,EAA0B5G,KAAKC,MAAMD,KAAKE,UAAUsG,EAAgBlH,sBAEpEuH,EAAO/G,EAAiBC,EAAWR,EAAmBF,EAAoB9C,EAAWqK,GAGvFC,EAAK1G,MACPiC,MAAMyE,EAAK1G,OAEXyF,EAAY,CAAES,MAAOQ,EAAMtK,YAAWC,eAGxC4F,MAAM,8JAuBI1F,WArGS,SAACS,GAEtB,IAAI+I,EAAaC,aAAaC,QAAQ,eACtCF,EAAaA,EAAalG,KAAKC,MAAMiG,GAAc,IACxCrG,KAAK1C,GAChBgJ,aAAaW,QAAQ,aAAc9G,KAAKE,UAAUgG,IAGlD,IAAMa,EAAcpB,EAASU,MAAMrI,OAAO,SAAAgJ,GAAS,OAAIhH,KAAKE,UAAU8G,KAAehH,KAAKE,UAAU/C,KACpGyI,EAAY,CAAES,MAAOU,EAAaxK,UAAWoJ,EAASpJ,UAAWC,MAAOmJ,EAASnJ,SA6FrEG,aA3FW,SAACQ,GAExB,IAAI+I,EAAaC,aAAaC,QAAQ,cAItCF,GAHAA,EAAaA,EAAalG,KAAKC,MAAMiG,GAAc,IAG3BlI,OAAO,SAAAgJ,GAAS,OAAIhH,KAAKE,UAAU8G,KAAehH,KAAKE,UAAU/C,KAGzFgJ,aAAaW,QAAQ,aAAc9G,KAAKE,UAAUgG,IAGlD,IAAMa,EAAcpB,EAASU,MAAMrI,OAAO,SAAAgJ,GAAS,OAAIhH,KAAKE,UAAU8G,KAAehH,KAAKE,UAAU/C,KACpGyI,EAAY,CAAES,MAAOU,EAAaxK,UAAWoJ,EAASpJ,UAAWC,MAAOmJ,EAASnJ,SA+ErEI,YAAaA,OAhBrB7D,IAAAC,cAACgE,IAAG,CAAC2J,KAAG,EAAC1N,UAAU,mBACjBF,IAAAC,cAACoF,IAAG,CAACuI,KAAG,GACN5N,IAAAC,cAACoH,EAAiB,CAACE,aA9CJ,SAACP,EAAWR,EAAmBF,EAAoBC,EAAqB/C,EAAWC,GAC1G,IAAMoG,EAAS9C,EAAiBC,EAAWR,EAAmBF,EAAoB9C,EAAW+C,GAEzFsD,EAAOzC,OACTiC,MAAMQ,EAAOzC,OACbyF,EAAY,CAAES,MAAO,GAAI9J,YAAWC,WAEpCoJ,EAAY,CAAES,MAAOzD,EAAQrG,YAAWC,UAI1CiK,EAAmB,CAAE1G,YAAWR,oBAAmBF,qBAAoBC,sBAAqB/C,YAAWC,eAuDrGzD,IAAAC,cAACoC,EAAY,CAACnC,UAAU,sBAAsBqC,cAAe2K,EAAsB1K,eAnH1D,WACzByK,GAAe,GACfR,GAAe,QC3hBNyB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxCC,EAAA/C,EAAA,GAAAgD,KAAAD,EAAAE,KAAA,UAAqBD,KAAK,SAAAjP,GAAiD,IAA9CmP,EAAMnP,EAANmP,OAAQC,EAAMpP,EAANoP,OAAQC,EAAMrP,EAANqP,OAAQC,EAAMtP,EAANsP,OAAQC,EAAOvP,EAAPuP,QAC3DJ,EAAOL,GACPM,EAAON,GACPO,EAAOP,GACPQ,EAAOR,GACPS,EAAQT,YCADU,IAASC,WAAWC,SAASC,eAAe,SACpDC,OACHjP,IAAAC,cAACD,IAAMkP,WAAU,KACflP,IAAAC,cAACqM,EAAG,QAOR4B","file":"static/js/main.7a477792.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Container, Row, Col, Button, Form } from 'react-bootstrap';\nimport Slider from 'react-input-slider';\n\nimport { Card, Stack } from 'react-bootstrap';\nimport { Alert } from 'react-bootstrap';\nimport { Navbar, Nav } from 'react-bootstrap';\nimport { BsFillTrash3Fill, BsSave } from \"react-icons/bs\";\n\nimport badCombinationMeat from './badCombinationMeat.json';\nimport allergenVeggies from './allergenVeggies.json';\nimport ingredients from './ingredients.json';\nimport babyTips from './babyTips.json';\n\nconst Ranking = ({ rankingData }) => {\n  const [expanded, setExpanded] = useState(Array(rankingData.length).fill(false));\n\n  const toggleExpand = (index) => {\n    const newExpanded = [...expanded];\n    newExpanded[index] = !newExpanded[index];\n    setExpanded(newExpanded);\n  };\n\n  return (\n    <div className=\"ranking-container\">\n      <h2 className=\"text-center\">이유식 인기순위</h2>\n      <ol style={{ paddingInlineStart: '0px', listStyleType: 'none' }}>\n        {rankingData.map((item, index) => (\n          <li key={item.rank} style={{\n            display: 'flex',\n            alignItems: 'center',\n            padding: '10px 20px',\n            margin: '10px',\n            borderRadius: '10px',\n            backgroundColor: index % 2 === 0 ? '#f3f3f3' : '#ffffff',\n            border: '1px solid #e0e0e0'\n          }}>\n            <span style={{\n              fontWeight: 'bold',\n              fontSize: '18px',\n              width: '60px',\n              textAlign: 'center'\n            }}>{item.rank}위</span>\n            <div style={{\n              display: 'flex',\n              flexDirection: 'row',\n              alignItems: 'center',\n              justifyContent: 'space-between',\n              width: 'calc(100% - 70px)',\n              overflow: 'hidden'\n            }}>\n              <span style={{\n                fontSize: '16px',\n                whiteSpace: expanded[index] ? 'normal' : 'nowrap',\n                overflow: 'hidden',\n                textOverflow: 'ellipsis',\n                maxWidth: '80%'\n              }}>{item.menu}</span>\n              {item.menu.length > 20 &&\n                <span\n                  onClick={() => toggleExpand(index)}\n                  style={{\n                    cursor: 'pointer',\n                    textDecoration: 'underline',\n                    color: '#007bff',\n                    fontSize: '14px',\n                    marginLeft: '10px'\n                  }}\n                >\n                  {expanded[index] ? '닫기' : '더 보기'}\n                </span>}\n            </div>\n          </li>\n        ))}\n      </ol>\n    </div>\n  );\n};\n\n\nconst BottomNavbar = ({ onRecipeClick, onRankingClick }) => {\n  return (\n    <Navbar fixed=\"bottom\" bg=\"primary\" className=\"justify-content-around\" style={{ paddingTop: '20px', paddingBottom: '50px', borderTopLeftRadius: '20px', borderTopRightRadius: '20px' }}>\n      <Nav.Link style={{color:'white'}} href=\"#recipe\" onClick={(event) => {event.preventDefault(); onRecipeClick();}}>저장된 레시피</Nav.Link>\n      <Nav.Link style={{color:'white'}} href=\"#ranking\" onClick={(event) => {event.preventDefault(); onRankingClick();}}>이유식 인기순위</Nav.Link>\n    </Navbar>\n  );\n};\n\nconst MealPlan = ({ mealPlan, babyMonth, stage, onRegeneratePlan, onMealSave, onMealDelete, isRecipeTab }) => {\n  const checkBadCombination = (meal) => {\n    const ingredients = meal.map(item => item.ingredient);\n    for (let i = 0; i < ingredients.length; i++) {\n      if (badCombinationMeat[ingredients[i]]) {\n        const badCombination = badCombinationMeat[ingredients[i]].find(ingredient => ingredients.includes(ingredient));\n        if (badCombination) {\n          return `좋지 않은 궁합: ${ingredients[i]}, ${badCombination}`;\n        }\n      }\n    }\n    \n    return null;\n  };\n\n  const checkAllergen = (meal) => {\n    const ingredients = meal.map(item => item.ingredient);\n    const allergens = allergenVeggies.filter(ingredient => ingredients.includes(ingredient));\n    if (allergens.length > 0) {\n      const allergenList = allergens.join(', ');\n      return `알레르기 주의: ${allergenList}`;\n    }\n    return null;\n  };\n  \n    // mealPlan이 배열인지 확인\n    if (!Array.isArray(mealPlan)) {\n      return <div>Error: mealPlan must be an array!</div>;\n    }\n    \n  return (\n    <div>\n      <h2 className=\"text-center\" style={{ marginTop: '50px' }}>\n        {babyMonth ? `${babyMonth}개월 아기, ` : ''}{stage} 식단표\n        </h2>\n      <Row xs={1} md={2} className=\"g-4\" style={{ marginTop: '10px' }}>\n        {mealPlan.map((meal, index) => {\n          const badCombinationWarning = checkBadCombination(meal);\n          const allergenWarning = checkAllergen(meal);\n          return (\n            <Col>\n              <Card>\n                <Card.Body>\n                  <Card.Title>메뉴 {index + 1} \n                  {!isRecipeTab && <BsSave style={{ marginLeft: '10px'}} onClick={() => onMealSave(meal)} />}\n                  {!isRecipeTab && <BsFillTrash3Fill onClick={() => onMealDelete(meal)} style={{ marginLeft: '30px', color: 'red'}}/>}\n                  {isRecipeTab  && <BsFillTrash3Fill onClick={() => onMealDelete(meal)} style={{ marginLeft: '30px', color: 'red'}}/>}                  \n                  </Card.Title>\n                  <Card.Text>\n                  식재료: {meal.filter(item => item.ingredient !== undefined).map(item => `${item.ingredient} (${item.category})`).join(', ')}\n                  </Card.Text>\n                  {badCombinationWarning && <Alert variant=\"warning\">{badCombinationWarning}</Alert>}\n                  {allergenWarning && <Alert variant=\"danger\">{allergenWarning}</Alert>}\n                </Card.Body>\n              </Card>\n            </Col>\n          );\n        })}\n      </Row>\n      <Row className=\"text-center\">\n      {!isRecipeTab ? (\n        <div className=\"d-flex justify-content-center mt-3\" style={{ marginBottom: '70px' }}>\n          <Col>\n            <Button variant=\"success\" onClick={onRegeneratePlan}>\n              다시 생성\n            </Button>\n          </Col>\n          <Col>\n            <Button variant=\"primary\" style={{ marginBottom: '70px' }} onClick={() => window.location.reload()}>\n              처음으로\n            </Button>\n          </Col>\n        </div>\n      ) : (\n        <div style={{ marginBottom: '120px' }}>\n          <Col>\n            <Button variant=\"primary\" style={{ marginBottom: '120px' }} onClick={() => window.location.reload()}>\n              메뉴 생성하기\n            </Button>\n          </Col>\n        </div>\n      )}\n      </Row>\n    </div>\n  );\n};\nconst generateMeal = (selectedCategories, babyMonth, selectedIngredients, selectedMenuCount) => {\n  const meal = [];\n\n  // 사용자가 선택한 식재료 중에서 무작위로 선택\n  while (meal.length < selectedMenuCount) {\n    const categoryIndex = Math.floor(Math.random() * selectedCategories.length);\n    const category = selectedCategories[categoryIndex];\n\n    if (selectedIngredients[category] && selectedIngredients[category].length > 0) {\n      const ingredientIndex = Math.floor(Math.random() * selectedIngredients[category].length);\n      const ingredient = selectedIngredients[category][ingredientIndex];\n\n      // 중복 식재료를 피하기 위해 선택한 식재료 제거\n      selectedIngredients[category].splice(ingredientIndex, 1);\n\n      meal.push({ ingredient, category });\n    } else {\n      // 사용 가능한 식재료가 없는 경우\n      return null; // 중요: null 반환\n    }\n  }\n\n  return meal;\n};\n\nconst generateMealPlan = (menuCount, selectedMenuCount, selectedCategories, babyMonth, selectedIngredients, ingredients) => {\n  const mealPlan = [];\n\n  // 메뉴 수만큼 반복하여 식단 생성\n  for (let i = 0; i < menuCount; i++) {\n    const meal = generateMeal(selectedCategories, babyMonth, JSON.parse(JSON.stringify(selectedIngredients)), selectedMenuCount); // 선택된 식재료의 복사본을 전달\n    if (!meal) {\n      return { error: `더 많은 식재료를 선택해주세요. ${selectedMenuCount}개의 추가 식재료가 필요합니다.` };\n    }\n    mealPlan.push(meal);\n  }\n\n  return mealPlan;\n};\n\n\n\n\nconst FoodSelectionForm = ({ onFormSubmit }) => {\n  const [step, setStep] = useState(1);\n  const [babyMonth, setBabyMonth] = useState(8);\n  const [menuCount, setMenuCount] = useState(4);\n  const [selectedMenuCount, setSelectedMenuCount] = useState(3);\n  const [selectedCategories, setSelectedCategories] = useState([]);\n  const [selectedIngredients, setSelectedIngredients] = useState({});\n  \n  // Add a function to determine the stage based on the baby's month\n  const determineStage = (babyMonth) => {\n    if (babyMonth <= 6) {\n      return \"초기\";\n    } else if (babyMonth <= 9) {\n      return \"중기\";\n    } else if (babyMonth <= 12) {\n      return \"후기\";\n    } else {\n      return \"완료기\";\n    }\n  };\n   \n  const handleFormSubmit = (event) => {\n    event.preventDefault();\n  \n    // 식재료 종류 선택 단계에서 검사합니다.\n    if (step === 2 && selectedCategories.length === 0) {\n      alert('최소 한 가지 이상의 식재료 종류를 선택해주세요.');\n      return;\n    }\n    // 식재료 선택 단계에서 검사합니다.\n    if (step >= 3 && step < selectedCategories.length + 3) {\n      const currentCategory = selectedCategories[step - 3];\n      if (!selectedIngredients[currentCategory] || selectedIngredients[currentCategory].length === 0) {\n        alert(`'${currentCategory}' 범주에서 최소 한 가지 이상의 식재료를 선택해주세요.`);\n        return;\n      }\n    }\n    if (step === selectedCategories.length + 3) {\n      // 선택된 식재료의 총 개수 확인\n      const totalSelectedIngredients = Object.values(selectedIngredients).reduce((total, arr) => total + arr.length, 0);\n    \n      // 선택된 식재료의 총 개수가 최소 개수보다 적은 경우\n      if (totalSelectedIngredients < 1) {\n        alert('최소 2개의 식재료를 선택해주세요.');\n        return;\n      }\n      setStep(step + 1);\n    } else if (step === selectedCategories.length + 5) {\n      // 식재료의 총 개수 확인\n      const totalSelectedIngredients = Object.values(selectedIngredients).reduce((total, arr) => total + arr.length, 0);\n      const requiredIngredients = selectedMenuCount * menuCount;\n      \n      if (totalSelectedIngredients < requiredIngredients) {\n        const lackingIngredients = requiredIngredients - totalSelectedIngredients; // 부족한 식재료의 개수 계산\n        alert(`총 식재료 개수가 부족합니다. ${lackingIngredients+1}개의 식재료를 더 선택해주세요.`);\n        setStep(2); // \"식재료 범주 선택\" 단계로 돌아갑니다.\n        return;\n      }\n      \n      // 식단표 생성\n      const result = generateMealPlan(menuCount, selectedMenuCount, selectedCategories, babyMonth, selectedIngredients, ingredients);\n      if (result) {\n        const stage = determineStage(babyMonth);\n        onFormSubmit(menuCount, selectedMenuCount, selectedCategories, selectedIngredients, babyMonth, stage, result);\n      }\n    } else {\n      // 그 외의 경우\n      setStep(step + 1);\n    }\n  };\n  \n  \n  const handleIngredientSelection = (category, value) => {\n    setSelectedIngredients((prevIngredients) => {\n      // Check if the category already has selected ingredients\n      if (prevIngredients[category]) {\n        // If the ingredient is already selected, remove it\n        if (prevIngredients[category].includes(value)) {\n          return {\n            ...prevIngredients,\n            [category]: prevIngredients[category].filter((item) => item !== value),\n          };\n        }\n        // If the ingredient is not selected, add it\n        else {\n          return {\n            ...prevIngredients,\n            [category]: [...prevIngredients[category], value],\n          };\n        }\n      }\n      // If the category does not have any selected ingredients, add the new ingredient\n      else {\n        return {\n          ...prevIngredients,\n          [category]: [value],\n        };\n      }\n    });\n  };\n  \n  // 이전 버튼을 처리하기 위한 함수를 추가합니다.\n  const handlePreviousStep = () => {\n    setStep(step - 1);\n  };\n\n  const [tip, setTip] = useState('');\n\n  useEffect(() => {\n    const randomIndex = Math.floor(Math.random() * babyTips.length);\n    setTip(babyTips[randomIndex]);\n  }, [step]); // step이 변경될 때마다 새 팁을 선택합니다.\n \n    \n  return (\n    <Form className=\"container-sm\" onSubmit={handleFormSubmit} style={{ marginTop: '50px' }}>\n      {step === 1 && (\n        <Form.Group className=\"mb-3\" controlId=\"formBabyMonth\">\n          <h2><Form.Label>아기의 나이를 선택하세요</Form.Label></h2>\n          <Slider\n            axis=\"x\"\n            x={babyMonth}\n            xmin={4}\n            xmax={12}\n            onChange={({ x }) => setBabyMonth(x)}\n            styles={{\n              track: {\n                height: '14px', // 높이를 원하는 크기로 설정\n                width: '100%'\n              },\n              active: {\n                height: '14px', // 높이를 원하는 크기로 설정\n                width: '100%'\n              }\n            }}\n          />\n          <div>선택된 개월 수: {babyMonth}</div>\n        </Form.Group>\n      )}\n      {step === 2 && (\n        <Form.Group className=\"mb-3\" controlId=\"formSelectedCategories\">\n          <h2><Form.Label>식재료 종류를 선택하세요</Form.Label></h2>\n          <div style={{ display: 'flex', flexDirection: 'column'}}>\n\n              {Object.keys(ingredients).map((category) => {\n                let categoryItems = [];\n                for (let month = 4; month <= babyMonth; month++) {\n                  if (ingredients[category][month]) {\n                    categoryItems = categoryItems.concat(ingredients[category][month]);\n                  }\n                }\n                if (categoryItems.length > 0) {\n                  return (\n                    <div style={{ width: '40%', margin: '4px 0' }}>\n                      <Form.Check className=\"fs-5\"\n                        type=\"checkbox\"\n                        id={category} // 추가한 id 속성\n                        label={category}\n                        value={category}\n                        checked={selectedCategories.includes(category)} // 이 부분을 수정\n                        onChange={(e) => {\n                          const value = e.target.value;\n                          setSelectedCategories((prevCategories) =>\n                            prevCategories.includes(value)\n                              ? prevCategories.filter((category) => category !== value)\n                              : [...prevCategories, value]\n                            );\n                          }}\n                      />\n                    </div>\n                  );\n                }\n                return null; // categoryItems.length가 0인 경우 null을 반환\n              })}\n          </div>\n        </Form.Group>\n      )}\n      {step === selectedCategories.length + 3 && (\n        <div>\n          <h2>Tip</h2>\n          <div style={{ marginBottom: '10px' }}>\n            {tip}\n          </div>\n          {/* 이곳에 리뷰를 남길 수 있는 폼이나 다른 요소들을 추가하면 됩니다. */}\n        </div>\n      )}\n      {step >= 3 && step < selectedCategories.length + 3 && (\n        (() => {\n          const category = selectedCategories[step - 3];\n          let categoryItems = [];\n          for (let month = 4; month <= babyMonth; month++) {\n            if (ingredients[category][month]) {\n              categoryItems = categoryItems.concat(ingredients[category][month]);\n            }\n          }\n\n          const handleSelectAll = (e) => {\n            const isChecked = e.target.checked;\n            const allItems = categoryItems;\n            setSelectedIngredients((prevIngredients) => ({\n              ...prevIngredients,\n              [category]: isChecked ? allItems : [],\n            }));\n          };\n\n          // Check if all items are selected\n          const allSelected = selectedIngredients[category] && selectedIngredients[category].length === categoryItems.length;\n\n          return (\n            <Form.Group className=\"mb-3\" controlId={`formSelectedIngredients-${category}`}>\n              <h2>\n                <Form.Label>{category}의 식재료를 선택하세요</Form.Label>\n              </h2>\n              <div style={{ display: 'flex', flexDirection: 'column' }}>\n                <Form.Check\n                  type=\"checkbox\"\n                  id={`selectAll-${category}`}\n                  label={<span style={{ fontWeight: 'bold' }}>전체 선택</span>}\n                  checked={allSelected}\n                  onChange={handleSelectAll}\n                />\n                <div style={{ display: 'flex', flexWrap: 'wrap' }}>\n                  {categoryItems.map((item) => (\n                    <div style={{ width: '50%', margin: '4px 0' }}>\n                      <Form.Check\n                        className=\"fs-6\" // 라벨의 크기를 조정하는 클래스를 추가합니다.\n                        type=\"checkbox\"\n                        id={item}\n                        label={item}\n                        value={item}\n                        checked={selectedIngredients[category] ? selectedIngredients[category].includes(item) : false}\n                        onChange={(e) => handleIngredientSelection(category, e.target.value)}\n                      />\n                    </div>\n                  ))}\n                </div>\n              </div>\n            </Form.Group>\n          );\n        })()\n      )}\n      {step === Math.max(4, selectedCategories.length + 4) && (\n        <Form.Group className=\"mb-3\" controlId=\"formSelectedMenuCount\">\n          <h2><Form.Label>식재료의 개수를 선택하세요</Form.Label></h2>\n          <Slider\n            axis=\"x\"\n            x={selectedMenuCount}\n            xmin={1}\n            xmax={5}\n            onChange={({ x }) => setSelectedMenuCount(x)}\n            styles={{\n              track: {\n                height: '14px', // 높이를 원하는 크기로 설정\n                width: '100%'\n              },\n              active: {\n                height: '14px', // 높이를 원하는 크기로 설정\n                width: '100%'\n              }\n            }}\n          />\n          <div>선택된 조합 식재료 종류: {selectedMenuCount}</div>\n        </Form.Group>\n      )}\n      {step === selectedCategories.length + 5 && (   \n        <Form.Group className=\"mb-3\" controlId=\"formMenuCount\">\n          <h2><Form.Label>생성할 메뉴 개수를 선택하세요</Form.Label></h2>\n          <Slider\n            axis=\"x\"\n            x={menuCount}\n            xmin={1}\n            xmax={7}\n            onChange={({ x }) => setMenuCount(x)}\n            styles={{\n              track: {\n                height: '14px', // 높이를 원하는 크기로 설정\n                width: '100%'\n              },\n              active: {\n                height: '14px', // 높이를 원하는 크기로 설정\n                width: '100%'\n              }\n            }}\n          />\n          <div>선택된 메뉴 개수: {menuCount}</div>\n        </Form.Group>\n      )}\n      <Stack gap={5}>\n      <div style={{ display: 'flex', justifyContent: 'space-between' }}>\n        {/* 이전 버튼을 추가합니다. 첫 단계에서는 보이지 않게 합니다. */}\n        {step > 1 && (\n          <Button variant=\"secondary\" onClick={handlePreviousStep} style={{ width: '48%' }}>\n            이전\n          </Button>\n        )}\n        <Button\n          variant=\"primary\"\n          type=\"submit\"\n          style={{\n            width: step === 1 ? '100%' : '48%',\n            marginLeft: step > 1 ? '10px' : '0px',\n          }}\n        >\n          {step === selectedCategories.length + 5 ? '식단표 생성하기' : '다음'}\n        </Button>\n      </div>\n      <h3 className=\"text-center\" style={{ marginBottom: '90px' }}>{step} / {selectedCategories.length + 5}</h3>\n    </Stack>\n  </Form>\n  );\n};\n\nconst App = () => {\n  const [isRecipeTab, setIsRecipeTab] = useState(false);\n  const [dietPlan, setDietPlan] = useState(null);\n  const rankingData = [\n    { menu: \"닭고기와 쌀, 당근 볶음 (육류, 곡류, 채소류)\", rank: 1 },\n    { menu: \"연어와 감자, 시금치 스팀 (수산물, 채소류)\", rank: 2 },\n    { menu: \"소고기와 브로콜리 스튜 (육류, 채소류)\", rank: 3 },\n    { menu: \"배와 바나나 믹스 (과일류)\", rank: 4 },\n    { menu: \"토마토와 스위트콘 샐러드 (채소류)\", rank: 5 },\n    { menu: \"호박죽 (곡류)\", rank: 6 },\n    { menu: \"달걀과 치즈 오믈렛 (유제품)\", rank: 7 },\n    { menu: \"두부와 시금치 볶음 (콩류, 채소류)\", rank: 8 },\n    { menu: \"아몬드와 견과류 믹스 (견과류)\", rank: 9 },\n    { menu: \"새우와 미역국 (수산물)\", rank: 10 }\n  ];\n  \n  const [showRanking, setShowRanking] = useState(false); // 랭킹 탭 활성화 상태 관리\n\n    // 랭킹 탭 클릭 이벤트 핸들러\n    const handleRankingClick = () => {\n      setShowRanking(true);\n      setIsRecipeTab(false); // 레시피 탭 비활성화\n    };\n\n    \n  const handleMealSave = (meal) => {\n    // Save the meal to localStorage\n    let savedMeals = localStorage.getItem('savedMeals');\n    savedMeals = savedMeals ? JSON.parse(savedMeals) : [];\n    savedMeals.push(meal);\n    localStorage.setItem('savedMeals', JSON.stringify(savedMeals));\n  \n    // Remove the saved meal from the diet plan\n    const newDietPlan = dietPlan.meals.filter(savedMeal => JSON.stringify(savedMeal) !== JSON.stringify(meal));\n    setDietPlan({ meals: newDietPlan, babyMonth: dietPlan.babyMonth, stage: dietPlan.stage });\n  };\n  const handleMealDelete = (meal) => {\n    // Load the saved meals from localStorage\n    let savedMeals = localStorage.getItem('savedMeals');\n    savedMeals = savedMeals ? JSON.parse(savedMeals) : [];\n    \n    // Filter out the selected meal\n    savedMeals = savedMeals.filter(savedMeal => JSON.stringify(savedMeal) !== JSON.stringify(meal));\n    \n    // Save the updated meal list back to localStorage\n    localStorage.setItem('savedMeals', JSON.stringify(savedMeals));\n    \n    // Update the diet plan in the state\n    const newDietPlan = dietPlan.meals.filter(savedMeal => JSON.stringify(savedMeal) !== JSON.stringify(meal));\n    setDietPlan({ meals: newDietPlan, babyMonth: dietPlan.babyMonth, stage: dietPlan.stage });\n  };\n  \n  \n  useEffect(() => {\n    if (isRecipeTab) {\n      handleLoadSavedMeals();\n    }\n  }, [isRecipeTab]);\n\n  const handleLoadSavedMeals = () => {\n    // Load the saved meals from localStorage\n    let savedMeals = localStorage.getItem('savedMeals');\n    savedMeals = savedMeals ? JSON.parse(savedMeals) : [];\n    setDietPlan({ meals: savedMeals, babyMonth: null, stage: '저장된 ' });\n    setIsRecipeTab(true); // 수정: isRecipeTab 상태를 true로 변경\n    setShowRanking(false); // 랭킹 화면 숨기기\n  };\n  \n  const handleFormSubmit = (menuCount, selectedMenuCount, selectedCategories, selectedIngredients, babyMonth, stage) => {\n    const result = generateMealPlan(menuCount, selectedMenuCount, selectedCategories, babyMonth, selectedIngredients, ingredients);\n  \n    if (result.error) {\n      alert(result.error);\n      setDietPlan({ meals: [], babyMonth, stage });\n    } else {\n      setDietPlan({ meals: result, babyMonth, stage });\n    }\n  \n    // 마지막으로 선택한 입력 값을 저장합니다.\n    setLastInputValues({ menuCount, selectedMenuCount, selectedCategories, selectedIngredients, babyMonth, stage });\n  };\n  const [lastInputValues, setLastInputValues] = useState(null);\n  const handleRegeneratePlan = () => {\n    if (isRecipeTab) {\n      // If the user is in the recipe tab, reset to the initial form\n      setDietPlan(null);\n      setIsRecipeTab(false);\n      setLastInputValues(null);\n    } else if (lastInputValues) {\n      const { menuCount, selectedMenuCount, selectedCategories, babyMonth, stage } = lastInputValues;\n\n      // 선택된 식재료의 복사본을 생성합니다.\n      const selectedIngredientsCopy = JSON.parse(JSON.stringify(lastInputValues.selectedIngredients));\n  \n      const plan = generateMealPlan(menuCount, selectedMenuCount, selectedCategories, babyMonth, selectedIngredientsCopy, ingredients);\n  \n      // Check if the plan generation was successful\n      if (plan.error) {\n        alert(plan.error);\n      } else {\n        setDietPlan({ meals: plan, babyMonth, stage });\n      }\n    } else {\n      alert('이전에 선택된 값이 없어 식단표를 다시 생성할 수 없습니다.');\n    }\n  };\n  \n  return (\n    <Container className=\"App\">\n      {showRanking ? (\n        <Ranking rankingData={rankingData}/>\n      ) : !dietPlan ? (\n        <Row xxl className=\"container-fluid\">\n          <Col xxl>\n            <FoodSelectionForm onFormSubmit={handleFormSubmit} />\n          </Col>\n        </Row>\n      ) : (\n        <div className=\"flex-grow-1 padded-top\">\n          <Row className=\"justify-content-md-center\">\n            <Col xxl={1}>\n              <MealPlan\n                mealPlan={dietPlan.meals}\n                babyMonth={dietPlan.babyMonth}\n                stage={dietPlan.stage}\n                onRegeneratePlan={handleRegeneratePlan}\n                onMealSave={handleMealSave}\n                onMealDelete={handleMealDelete}\n                isRecipeTab={isRecipeTab}\n              />\n            </Col>\n          </Row>\n        </div>\n      )}\n      <BottomNavbar className=\"fixed-bottom-navbar\" onRecipeClick={handleLoadSavedMeals} onRankingClick={handleRankingClick} />\n    </Container>\n  );\n};\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}