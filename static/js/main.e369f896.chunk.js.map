{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["BottomNavbar","_ref","onRecipeClick","React","createElement","Navbar","fixed","bg","className","Nav","Link","href","onClick","event","preventDefault","MealPlan","_ref2","mealPlan","babyMonth","stage","onRegeneratePlan","onMealSave","onMealDelete","isRecipeTab","concat","Row","xs","md","map","meal","index","badCombinationWarning","ingredients","item","ingredient","i","length","badCombinationMeat","badCombination","find","includes","checkBadCombination","allergenWarning","allergens","allergenVeggies","filter","allergenList","join","particle","word","lastChar","charAt","getSubjectParticle","checkAllergen","Col","Card","Body","Title","slice","Text","undefined","category","Alert","variant","Footer","Button","generateMealPlan","menuCount","selectedMenuCount","selectedCategories","allCategories","Object","keys","_loop","selectedIngredients","forEach","categoryItems","month","randomIndex","Math","floor","random","push","randomCategory","randomIngredient","FoodSelectionForm","_ref3","onFormSubmit","_useState","useState","_useState2","_slicedToArray","step","setStep","_useState3","_useState4","setBabyMonth","_useState5","_useState6","setMenuCount","_useState7","_useState8","setSelectedMenuCount","_useState9","_useState10","setSelectedCategories","_useState11","_useState12","setSelectedIngredients","Form","onSubmit","determineStage","Group","controlId","Label","Slider","axis","x","xmin","xmax","onChange","_ref4","Check","type","label","value","e","target","prevCategories","_toConsumableArray","prevIngredients","_ref5","_ref6","App","_useState13","_useState14","setIsRecipeTab","_useState15","setShowConfetti","_useState17","_useState18","dietPlan","setDietPlan","useEffect","handleLoadSavedMeals","savedMeals","localStorage","getItem","JSON","parse","meals","_useState19","_useState20","lastInputValues","setLastInputValues","Container","lg","plan","setItem","stringify","setTimeout","newDietPlan","savedMeal","reportWebVitals","onPerfEntry","Function","__webpack_require__","then","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.e369f896.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Container, Row, Col, Button, Form } from 'react-bootstrap';\nimport Slider from 'react-input-slider';\n\nimport { Card } from 'react-bootstrap';\nimport { Alert } from 'react-bootstrap';\nimport { Navbar, Nav } from 'react-bootstrap';\n\nimport badCombinationMeat from './badCombinationMeat.json';\nimport allergenVeggies from './allergenVeggies.json';\nimport ingredients from './ingredients.json';\n\nconst BottomNavbar = ({ onRecipeClick }) => {\n  return (\n    <Navbar fixed=\"bottom\" bg=\"light\" className=\"justify-content-around\">\n      <Nav.Link href=\"#recipe\" onClick={(event) => {event.preventDefault(); onRecipeClick();}}>레시피</Nav.Link>\n      <Nav.Link href=\"#ranking\">랭킹</Nav.Link>\n    </Navbar>\n  );\n};\n\nconst MealPlan = ({ mealPlan, babyMonth, stage, onRegeneratePlan, onMealSave, onMealDelete, isRecipeTab }) => {\n  const getSubjectParticle = (word) => {\n    const lastChar = word.charAt(word.length - 1);\n    // If the last character is a vowel, return '은'; otherwise, return '는'\n    return ['가', '나', '다', '라', '대', '린','림', '마', '망', '바', '사', '아', '차', '콩', '타', '파', '하'].includes(lastChar) ? '은' : '는';\n  };\n    \n  const checkBadCombination = (meal) => {\n    const ingredients = meal.map(item => item.ingredient);\n    for (let i = 0; i < ingredients.length; i++) {\n      if (badCombinationMeat[ingredients[i]]) {\n        const badCombination = badCombinationMeat[ingredients[i]].find(ingredient => ingredients.includes(ingredient));\n        if (badCombination) {\n          return `주의: ${ingredients[i]}와 ${badCombination}은 좋지 않은 궁합입니다.`;\n        }\n      }\n    }\n    return null;\n  };\n\n  const checkAllergen = (meal) => {\n    const ingredients = meal.map(item => item.ingredient);\n    const allergens = allergenVeggies.filter(ingredient => ingredients.includes(ingredient));\n    if (allergens.length > 0) {\n      const allergenList = allergens.join(', ');\n      const particle = getSubjectParticle(allergenList);\n      return `주의: ${allergenList}${particle} 알레르기를 유발할 수 있습니다.`;\n    }\n    return null;\n  };\n  \n  \n  return (\n    <div>\n      <h2 className=\"text-center\">{babyMonth ? `${babyMonth}개월 아기, ` : ''}{stage} 식단표</h2>\n      <Row xs={1} md={2} className=\"g-4\">\n        {mealPlan.map((meal, index) => {\n          const badCombinationWarning = checkBadCombination(meal);\n          const allergenWarning = checkAllergen(meal);\n          return (\n            <Col>\n              <Card>\n                <Card.Body>\n                  <Card.Title>메뉴 {index + 1}: {meal.slice(0, 2).map(item => item.ingredient).join(' ')} </Card.Title>\n                  <Card.Text>\n                  식재료: {meal.filter(item => item.ingredient !== undefined).map(item => `${item.ingredient} (${item.category})`).join(', ')}\n                  </Card.Text>\n                  {badCombinationWarning && <Alert variant=\"warning\">{badCombinationWarning}</Alert>}\n                  {allergenWarning && <Alert variant=\"danger\">{allergenWarning}</Alert>}\n                </Card.Body>\n                <Card.Footer className=\"d-flex justify-content-end\">\n                {!isRecipeTab && <Button variant=\"success\" onClick={() => onMealSave(meal)}>저장</Button>}\n                  {isRecipeTab && <Button variant=\"danger\" onClick={() => onMealDelete(meal)}>삭제</Button>}\n                </Card.Footer>\n              </Card>\n            </Col>\n          );\n        })}\n      </Row>\n      {!isRecipeTab ? (\n        <div className=\"d-flex justify-content-center mt-3\">\n          <Button className=\"floating\" variant=\"primary\" onClick={onRegeneratePlan}>\n            식단표 다시 생성\n          </Button>\n        </div>\n      ) : (\n        <div className=\"d-flex justify-content-center mt-3\">\n          <Button variant=\"primary\" onClick={onRegeneratePlan}>\n            메뉴 생성하기\n          </Button>\n        </div>\n      )}\n    </div>\n  );\n};\n\nconst generateMealPlan = (menuCount, selectedMenuCount, selectedCategories, babyMonth) => {\n  let mealPlan = [];\n  const allCategories = Object.keys(ingredients);\n\n  for (let i = 0; i < menuCount; i++) {\n    const meal = [];\n    const selectedIngredients = [];\n\n    selectedCategories.forEach((category) => {\n      // Collect all ingredients for the category up to the selected babyMonth\n      let categoryItems = [];\n      for (let month = 4; month <= babyMonth; month++) {\n        categoryItems = categoryItems.concat(ingredients[category][month] || []);\n      }\n    \n      // If the category has no items, skip this category\n      if (categoryItems.length === 0) {\n        return;\n      }\n   \n\n      let randomIndex = Math.floor(Math.random() * categoryItems.length);\n\n      while (selectedIngredients.includes(categoryItems[randomIndex])) {\n        randomIndex = Math.floor(Math.random() * categoryItems.length);\n      }\n\n      selectedIngredients.push(categoryItems[randomIndex]);\n      // Save the ingredient together with its category\n      meal.push({ ingredient: categoryItems[randomIndex], category });\n    });\n\n    // If the meal is still less than the selected menu count, fill with random ingredients\n    while (meal.length < selectedMenuCount) {\n      const randomCategory = allCategories[Math.floor(Math.random() * allCategories.length)];\n\n      // Collect all ingredients for the category up to the selected babyMonth\n      let categoryItems = [];\n      for (let month = 4; month <= babyMonth; month++) {\n        categoryItems = categoryItems.concat(ingredients[randomCategory][month] || []);\n      }\n\n      const randomIngredient = categoryItems[Math.floor(Math.random() * categoryItems.length)];\n\n      if (!selectedIngredients.includes(randomIngredient)) {\n        selectedIngredients.push(randomIngredient);\n        // Save the ingredient together with its category\n        meal.push({ ingredient: randomIngredient, category: randomCategory });\n      }\n    }\n\n    mealPlan.push(meal);\n  }\n\n  return mealPlan;\n};\n\n\nconst FoodSelectionForm = ({ onFormSubmit }) => {\n  const [step, setStep] = useState(1);\n  const [babyMonth, setBabyMonth] = useState(8);\n  const [menuCount, setMenuCount] = useState(4);\n  const [selectedMenuCount, setSelectedMenuCount] = useState(3);\n  const [selectedCategories, setSelectedCategories] = useState([]);\n  const [selectedIngredients, setSelectedIngredients] = useState([]);\n\n  // Add a function to determine the stage based on the baby's month\n  const determineStage = (babyMonth) => {\n    if (babyMonth <= 6) {\n      return \"초기\";\n    } else if (babyMonth <= 9) {\n      return \"중기\";\n    } else if (babyMonth <= 12) {\n      return \"후기\";\n    } else {\n      return \"완료기\";\n    }\n  };\n\n  const handleFormSubmit = (event) => {\n    event.preventDefault();\n    \n    // If no categories are selected in step 2, skip to step 4\n    if (step === 2 && selectedCategories.length === 0) {\n      setStep(4);\n    } else if (step === 5) {\n      const stage = determineStage(babyMonth); // Determine the stage based on the baby's month\n      onFormSubmit(menuCount, selectedMenuCount, selectedCategories, babyMonth, stage);\n    } else {\n      setStep(step + 1);\n    }\n  };\n  \n  return (\n    <Form className=\"form-input\" onSubmit={handleFormSubmit}>\n      <h3>Step {step} of 5</h3>\n\n      {step === 1 && (\n        <Form.Group className=\"mb-3\" controlId=\"formBabyMonth\">\n          <Form.Label>아기의 개월 수를 선택하세요 (4~12개월)</Form.Label>\n          <Slider\n            axis=\"x\"\n            x={babyMonth}\n            xmin={4}\n            xmax={12}\n            onChange={({ x }) => setBabyMonth(x)}\n          />\n          <div>선택된 개월 수: {babyMonth}</div>\n        </Form.Group>\n      )}\n\n      {step === 2 && (\n        <Form.Group className=\"mb-3\" controlId=\"formSelectedCategories\">\n          <Form.Label>식재료 범주를 선택하세요</Form.Label>\n          {Object.keys(ingredients).map((category) => {\n            let categoryItems = [];\n            for (let month = 4; month <= babyMonth; month++) {\n              if (ingredients[category][month]) {\n                categoryItems = categoryItems.concat(ingredients[category][month]);\n              }\n            }\n            if (categoryItems.length > 0) {\n              return (\n                <Form.Check\n                  type=\"checkbox\"\n                  label={category}\n                  value={category}\n                  onChange={(e) => {\n                    const value = e.target.value;\n                    setSelectedCategories((prevCategories) =>\n                      prevCategories.includes(value)\n                        ? prevCategories.filter((category) => category !== value)\n                        : [...prevCategories, value]\n                    );\n                  }}\n                />\n              );\n            } else {\n              return null;\n            }\n          })}\n        </Form.Group>\n      )}\n      {step === 3 && (\n          <Form.Group className=\"mb-3\" controlId=\"formSelectedIngredients\">\n            <Form.Label>식재료를 선택하세요</Form.Label>\n            {selectedCategories.map((category) => {\n              let categoryItems = [];\n              for (let month = 4; month <= babyMonth; month++) {\n                if (ingredients[category][month]) {\n                  categoryItems = categoryItems.concat(ingredients[category][month]);\n                }\n              }\n              return categoryItems.map((item) => (\n                <Form.Check\n                  type=\"checkbox\"\n                  label={item}\n                  value={item}\n                  onChange={(e) => {\n                    const value = e.target.value;\n                    setSelectedIngredients((prevIngredients) =>\n                      prevIngredients.includes(value)\n                        ? prevIngredients.filter((item) => item !== value)\n                        : [...prevIngredients, value]\n                    );\n                  }}\n                />\n              ));\n            })}\n          </Form.Group>\n      )}\n\n      {step === 4 && (\n        <Form.Group className=\"mb-3\" controlId=\"formSelectedMenuCount\">\n          <Form.Label>\n            식재료를 조합하여 만들 수 있는 식재료의 개수를 선택하세요 (1 ~ 5)\n          </Form.Label>\n          <Slider\n            axis=\"x\"\n            x={selectedMenuCount}\n            xmin={1}\n            xmax={5}\n            onChange={({ x }) => setSelectedMenuCount(x)}\n          />\n          <div>선택된 조합 식재료 종류: {selectedMenuCount}</div>\n        </Form.Group>\n      )}\n\n      {step === 5 && (        \n        <Form.Group className=\"mb-3\" controlId=\"formMenuCount\">\n          <Form.Label>원하는 메뉴의 개수를 선택하세요 (1 ~ 7)</Form.Label>\n          <Slider\n            axis=\"x\"\n            x={menuCount}\n            xmin={1}\n            xmax={7}\n            onChange={({ x }) => setMenuCount(x)}\n          />\n          <div>선택된 메뉴 개수: {menuCount}</div>\n        </Form.Group>\n      )}\n\n      <Button variant=\"primary\" type=\"submit\">\n        {step === 5 ? '식단표 생성하기' : '다음'}\n      </Button>\n    </Form>\n  );\n};\n\nconst App = () => {\n  const [isRecipeTab, setIsRecipeTab] = useState(false);\n  const [setShowConfetti] = useState(false);\n  const [dietPlan, setDietPlan] = useState(null);\n  const handleMealSave = (meal) => {\n    // Save the meal to localStorage\n    let savedMeals = localStorage.getItem('savedMeals');\n    savedMeals = savedMeals ? JSON.parse(savedMeals) : [];\n    savedMeals.push(meal);\n    localStorage.setItem('savedMeals', JSON.stringify(savedMeals));\n  \n    // Remove the saved meal from the diet plan\n    const newDietPlan = dietPlan.meals.filter(savedMeal => JSON.stringify(savedMeal) !== JSON.stringify(meal));\n    setDietPlan({ meals: newDietPlan, babyMonth: dietPlan.babyMonth, stage: dietPlan.stage });\n  };\n  const handleMealDelete = (meal) => {\n    // Load the saved meals from localStorage\n    let savedMeals = localStorage.getItem('savedMeals');\n    savedMeals = savedMeals ? JSON.parse(savedMeals) : [];\n    \n    // Filter out the selected meal\n    savedMeals = savedMeals.filter(savedMeal => JSON.stringify(savedMeal) !== JSON.stringify(meal));\n    \n    // Save the updated meal list back to localStorage\n    localStorage.setItem('savedMeals', JSON.stringify(savedMeals));\n    \n    // Update the diet plan in the state\n    const newDietPlan = dietPlan.meals.filter(savedMeal => JSON.stringify(savedMeal) !== JSON.stringify(meal));\n    setDietPlan({ meals: newDietPlan, babyMonth: dietPlan.babyMonth, stage: dietPlan.stage });\n  };\n  \n  \n  useEffect(() => {\n    if (isRecipeTab) {\n      handleLoadSavedMeals();\n    }\n  }, [isRecipeTab]);\n\n  const handleLoadSavedMeals = () => {\n    // Load the saved meals from localStorage\n    let savedMeals = localStorage.getItem('savedMeals');\n    savedMeals = savedMeals ? JSON.parse(savedMeals) : [];\n    setDietPlan({ meals: savedMeals, babyMonth: null, stage: '저장된 ' });\n    setIsRecipeTab(true); // 수정: isRecipeTab 상태를 true로 변경\n  };\n  \n  \n  const handleFormSubmit = (menuCount, selectedMenuCount, selectedCategories, babyMonth, stage) => {\n    const plan = generateMealPlan(menuCount, selectedMenuCount, selectedCategories, babyMonth);\n    setDietPlan({ meals: plan, babyMonth, stage }); // Pass babyMonth and stage along with the meal plan\n  \n    // Save the diet plan to localStorage\n    localStorage.setItem('dietPlan', JSON.stringify({ meals: plan, babyMonth, stage }));\n  \n    // Save the input values\n    setLastInputValues({ menuCount, selectedMenuCount, selectedCategories, babyMonth, stage });\n  \n    setShowConfetti(true);\n    setTimeout(() => {\n      setShowConfetti('fade-out');\n      setTimeout(() => setShowConfetti(false), 1000);\n    }, 3000);\n  };\n  const [lastInputValues, setLastInputValues] = useState(null);\n  const handleRegeneratePlan = () => {\n    if (isRecipeTab) {\n      // If the user is in the recipe tab, reset to the initial form\n      setDietPlan(null);\n      setIsRecipeTab(false);\n      setLastInputValues(null);\n    } else if (lastInputValues) {\n      // If the user is in the menu result page and there are last input values, regenerate the plan based on them\n      const { menuCount, selectedMenuCount, selectedCategories, babyMonth, stage } = lastInputValues;\n      const plan = generateMealPlan(menuCount, selectedMenuCount, selectedCategories, babyMonth);\n      setDietPlan({ meals: plan, babyMonth, stage });\n    } else {\n      // If the user is in the menu result page and there are no last input values, reset to the initial form\n      setDietPlan(null);\n      setIsRecipeTab(false);\n    }\n  };\n  \n  return (\n    <Container className=\"App\">\n      {!dietPlan && (\n        <Row className=\"justify-content-md-center\">\n          <Col xs lg=\"6\">\n            <FoodSelectionForm onFormSubmit={handleFormSubmit} />\n          </Col>\n        </Row>\n      )}\n      {dietPlan && (\n        <div className=\"flex-grow-1 padded-top\">\n          <Row className=\"justify-content-md-center\">\n            <Col xs lg=\"6\">\n            <MealPlan\n              mealPlan={dietPlan.meals}\n              babyMonth={dietPlan.babyMonth}\n              stage={dietPlan.stage}\n              onRegeneratePlan={handleRegeneratePlan}\n              onMealSave={handleMealSave}\n              onMealDelete={handleMealDelete}\n              isRecipeTab={isRecipeTab} // 수정: isRecipeTab 상태를 MealPlan 컴포넌트에 전달\n            />\n            </Col>\n          </Row>\n        </div>\n      )}\n      <BottomNavbar className=\"fixed-bottom-navbar\" onRecipeClick={handleLoadSavedMeals} />\n    </Container>\n  );\n};\n\n\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}